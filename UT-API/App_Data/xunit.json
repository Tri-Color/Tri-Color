[
  {
    "$id": "1",
    "FileName": "BriefingWorkRecordMigratorFact.cs",
    "Description": "briefing work record migrator fact",
    "WhenList": [],
    "ThenList": [
      "should migrate successfully",
      "should migrate missing info successfully",
      "should migrate successfully when briefing coordinator is null"
    ],
    "Children": []
  },
  {
    "$id": "2",
    "FileName": "EmployerWorkRecordMigratorFact.cs",
    "Description": "employer work record migrator fact",
    "WhenList": [],
    "ThenList": [
      "should migrate successfully with month employer work record info",
      "should migrate successfully with annual employer work record info"
    ],
    "Children": []
  },
  {
    "$id": "3",
    "FileName": "ImmigrationWorkRecordMigratorFact.cs",
    "Description": "immigration work record migrator fact",
    "WhenList": [],
    "ThenList": [
      "should migrate successfully with basic immigration work record info",
      "should migrate missing item",
      "should migrate successfully with full immigration work record info"
    ],
    "Children": []
  },
  {
    "$id": "4",
    "FileName": "SocialSecurityWorkRecordMigrationFact.cs",
    "Description": "social security work record migration fact",
    "WhenList": [],
    "ThenList": [
      "should migrate successfully",
      "should migrate missing info successfully"
    ],
    "Children": []
  },
  {
    "$id": "5",
    "FileName": "TaxWorkRecordMigratorFacts.cs",
    "Description": "tax work record migrator facts",
    "WhenList": [],
    "ThenList": [
      "should migrate successfully with basic tax work record info for other compliance",
      "should migrate successfully with basic tax work record info for tax return",
      "should migrate successfully with missing info for tax return",
      "should not migrate tax briefing work record",
      "should migrate successfully with full tax work record info",
      "should transfer null if note author is null"
    ],
    "Children": []
  },
  {
    "$id": "6",
    "FileName": "AssigneeMigratorFacts.cs",
    "Description": "assignee migrator facts",
    "WhenList": [],
    "ThenList": [
      "should support to migrate specific assignee",
      "should create new stream for each assignee",
      "should be success if assignee is migrated to eventstore",
      "should create two events when force migrate assignee",
      "should create an event when first migration failed",
      "should take assignee snapshot into eventstore",
      "should migrate client associations",
      "should get null when family member coutry is null",
      "should take restricted assignee snapshot into eventstore"
    ],
    "Children": []
  },
  {
    "$id": "7",
    "FileName": "BatchMigrateRunnerFacts.cs",
    "Description": "batch migrate runner facts",
    "WhenList": [],
    "ThenList": [
      "should not migrate engagement if time exceed"
    ],
    "Children": []
  },
  {
    "$id": "8",
    "FileName": "ClientMigratorFacts.cs",
    "Description": "client migrator facts",
    "WhenList": [],
    "ThenList": [
      "should migrate pending client into eventstore",
      "should migrate approved client into eventstore"
    ],
    "Children": []
  },
  {
    "$id": "9",
    "FileName": "EngagementMigratorFacts.cs",
    "Description": "engagement migrator facts",
    "WhenList": [],
    "ThenList": [
      "should create new stream for each engagement",
      "should append to original stream if engagement already exists in event store",
      "should take current engagement snapshot into event",
      "should take snap shot of responsible offices",
      "shold take snapshot of engaged office contact",
      "shold take snapshot of custom field subscription",
      "shold take snapshot of check list subscription",
      "shold take snapshot of engagement task template ids",
      "shold take snapshot of engagement administrators",
      "should append stream if engagement exist",
      "shold take snapshot of admin access lists",
      "should migrate correct coordinating office"
    ],
    "Children": []
  },
  {
    "$id": "10",
    "FileName": "StaffMigratorFacts.cs",
    "Description": "staff migrator facts",
    "WhenList": [],
    "ThenList": [
      "should create new stream for each staff",
      "should be success if staff is migrated to eventstore",
      "should skip staff which is migrated to eventstore",
      "should create two events when force migrate staff",
      "should take staff snapshot into eventstore"
    ],
    "Children": []
  },
  {
    "$id": "11",
    "FileName": "TeamMigratorFacts.cs",
    "Description": "team migrator facts",
    "WhenList": [],
    "ThenList": [
      "should create new stream for team",
      "should be success if team is migrated to eventstore",
      "should skip team which is migrated to eventstore",
      "should create two events when force migrate team",
      "should take team snapshot into eventstore"
    ],
    "Children": []
  },
  {
    "$id": "12",
    "FileName": "InCsvFileFacts.cs",
    "Description": "in csv file facts",
    "WhenList": [],
    "ThenList": [
      "should fetch filtered assigned when active assignee with US and workrecord is active",
      "should fetch filtered assigned when active assignee with closed workrecord in included days",
      "should get only one record when active assignee with multiple closed workrecord in included days",
      "should get assignee if close work records has us assigned work record task within days",
      "should serve assignee if close work records has us assigned check list item",
      "should serve assignee if open work records has us assigned check list item",
      "should get assignee if open workrecords has us assigned work record task"
    ],
    "Children": []
  },
  {
    "$id": "13",
    "FileName": "GetAssigneeForPrivateClientFacts.cs",
    "Description": "get assignee for private client facts",
    "WhenList": [],
    "ThenList": [
      "should not serve assignee belongs to private client if assignee has open work record",
      "should not serve assignee belong to private client if assignee have no open work record"
    ],
    "Children": []
  },
  {
    "$id": "14",
    "FileName": "GetAssigneeWorkRecordRelatedFacts.cs",
    "Description": "get assignee work record related facts",
    "WhenList": [],
    "ThenList": [
      "should not fetch filtered assigned when active assignee with closed workrecord in excluded days",
      "should not in csv file if assignee has only open non tax work record",
      "should not in csv file if assignee has only close non tax work record",
      "should not fetch filtered assignees when no workrecord in US"
    ],
    "Children": []
  },
  {
    "$id": "15",
    "FileName": "GetInActiveAssigneeFacts.cs",
    "Description": "get in active assignee facts",
    "WhenList": [],
    "ThenList": [
      "should not serve inactive assignee when assignee has no open work record",
      "should not serve assignee when inactive assignee has no open work record"
    ],
    "Children": []
  },
  {
    "$id": "16",
    "FileName": "GetRestrictedAssigneeFacts.cs",
    "Description": "get restricted assignee facts",
    "WhenList": [],
    "ThenList": [
      "should not serve restricted assignee if assignee has open work record",
      "should not serve restricted assignee when assignee is restricted if assignee has no open work record"
    ],
    "Children": []
  },
  {
    "$id": "17",
    "FileName": "CsvFileGeneratorFacts.cs",
    "Description": "csv file generator facts",
    "WhenList": [],
    "ThenList": [
      "should generate csv content"
    ],
    "Children": []
  },
  {
    "$id": "18",
    "FileName": "NextLinkGeneratorFacts.cs",
    "Description": "next link generator facts",
    "WhenList": [],
    "ThenList": [
      "should generate file by latest event id",
      "should generate file by zero when no any event"
    ],
    "Children": []
  },
  {
    "$id": "19",
    "FileName": "AssigneePersonalDetailsSectionPerfFacts.cs",
    "Description": "assignee personal details section perf facts",
    "WhenList": [],
    "ThenList": [
      "should time less than 10 when get personal details data with default filter"
    ],
    "Children": []
  },
  {
    "$id": "20",
    "FileName": "MyDataSlowQuyerAnalysisServiceFacts.cs",
    "Description": "my data slow quyer analysis service facts",
    "WhenList": [],
    "ThenList": [
      "should save analysis result after analyze"
    ],
    "Children": []
  },
  {
    "$id": "21",
    "FileName": "RestrictedAssigneeFilterFacts.cs",
    "Description": "restricted assignee filter facts",
    "WhenList": [],
    "ThenList": [
      "should return false when current user is global admin while some assignees are restricted",
      "should return false when current user is on acl while some assignees are restricted",
      "should return false when current user is not on contact list while some assignees are restricted",
      "should return false when all assignees are normal",
      "should return true when current user is not on acl while some assignees are restricted",
      "should return false when user is not on acl while only inactive assignees are restricted for assignee sections",
      "should return true when user is not on acl while only inactive assignees are restricted for workrecord sections"
    ],
    "Children": []
  },
  {
    "$id": "22",
    "FileName": "SimpleMemoryCacheFact.cs",
    "Description": "simple memory cache fact",
    "WhenList": [],
    "ThenList": [
      "should return correctly object from cache after add object to it",
      "should return null from cache when cache is not exist",
      "should return null from cache when cache expiration"
    ],
    "Children": []
  },
  {
    "$id": "23",
    "FileName": "SingleEngagmentAclFilterFacts.cs",
    "Description": "single engagment acl filter facts",
    "WhenList": [],
    "ThenList": [
      "should return false current user is acl with restricted engagement",
      "should return true current user is not acl with restricted engagement",
      "should return false current user is global admin with restricted engagement",
      "should return false with normal engagement",
      "should not be filtered out if current user is subscribed office primary contact for restricted engagement",
      "should not be filtered out if current user is subscribed office secondary contact for restricted engagement",
      "should not be filtered out if current user is coordinating office primary contact for restricted engagement",
      "should not be filtered out if current user is coordinating office secondary contact for restricted engagement",
      "should be filtered out if current user is coordinating office primary contact but in another office for restricted engagement",
      "should be filtered out if current user is coordinating office secondary contact but in another office for restricted engagement"
    ],
    "Children": []
  },
  {
    "$id": "24",
    "FileName": "SlowQueryLogFormatterFacts.cs",
    "Description": "slow query log formatter facts",
    "WhenList": [],
    "ThenList": [
      "should contain slow query label in slow log message",
      "should contain time taken in slow log message",
      "should contain sql in slow log message",
      "should contain parameters in slow log message",
      "should contain slow query analysis label in analysis result message",
      "should contain slow query id in analysis result message",
      "should contain time taken in analysis result message",
      "should contain sql in analysis result message",
      "should contain parameters in analysis result message",
      "should contain execution plan in analysis result message",
      "should contain output message in analysis result message"
    ],
    "Children": []
  },
  {
    "$id": "25",
    "FileName": "SlowQueryLoggerFacts.cs",
    "Description": "slow query logger facts",
    "WhenList": [],
    "ThenList": [
      "should log query when it takes more time than threshold",
      "should not log query when it takes less time than threshold",
      "should log query information when it takes more time than threshold"
    ],
    "Children": []
  },
  {
    "$id": "26",
    "FileName": "StaffServedEngagementFilterFacts.cs",
    "Description": "staff served engagement filter facts",
    "WhenList": [],
    "ThenList": [
      "should return false current user is acl with normal and restricted engagement",
      "should return true current user is not acl with restricted engagement",
      "should return fasle current user is globa admin with restricted engagement",
      "should return false current user does not have served engagement",
      "should return false current user in team of wr related engagement",
      "should return true current user in team of wr related restricted engagement"
    ],
    "Children": []
  },
  {
    "$id": "27",
    "FileName": "AssigneeUacFacts.cs",
    "Description": "assignee uac facts",
    "WhenList": [],
    "ThenList": [
      "should staff not get assignee when staff not in subscribed office",
      "should staff get assignees when staff in assignee general contact",
      "should staff not get assignee when only in work office",
      "should staff get assignee when is coordinating office and self nominate",
      "should staff not get assignee when is coordinating office but not self nominate",
      "should not get assignee with workrecord but staff not in workrecord responsible office",
      "should get assignee with workrecord and staff in reponsible office",
      "should staff get work record when staff in workrecord team",
      "should not get assignee with workrecord when office assigned to task but staff not",
      "should get assignee with workrecord but staff any task assigned to",
      "should not get assignee with workrecord when office assigned but staff not to check list item",
      "should get assignee with workrecord but staff any check list item assigned to"
    ],
    "Children": []
  },
  {
    "$id": "28",
    "FileName": "FilterFacts.cs",
    "Description": "filter facts",
    "WhenList": [],
    "ThenList": [
      "should filter by practice type when assignee no workrecords",
      "should filter by practice type when assignee have workrecords",
      "should filter by engagement when assignee no workrecords",
      "should filter by engagement when assignee have workrecords",
      "should filter by assignee lastname when assignee no workrecords",
      "should filter by assignee lastname when assignee have workrecords",
      "should filter by home country when assignee no workrecords",
      "should filter by home country when assignee have workrecords",
      "should filter by assignee custom field country when assignee no workrecords",
      "should filter by assignee custom field country when assignee have workrecords",
      "should filter by workrecord country when assignee no workrecords",
      "should filter by workrecord country when assignee have workrecords",
      "should filter by responsible office when assignee no workrecords",
      "should filter by responsible office when assignee have workrecords",
      "should filter by primary service when assignee no workrecords",
      "should filter by primary service when assignee have workrecords",
      "should filter by year when assignee no workrecords",
      "should filter by year when assignee have workrecords",
      "should filter by questionnaire current status when assignee no workrecords",
      "should filter by questionnaire current status when assignee have workrecords",
      "should filter by go migration status when assignee no workrecords",
      "should filter by go migration status when assignee have workrecords",
      "should get restricted assignee data correctly when staff in acl",
      "should get restricted assignee data correctly when staff in primary contact",
      "should not get restricted assignee data correctly when staff not in acl",
      "should not get restricted assignee data correctly when staff not in primary contact"
    ],
    "Children": []
  },
  {
    "$id": "29",
    "FileName": "WorkRecordUacFact.cs",
    "Description": "work record uac fact",
    "WhenList": [],
    "ThenList": [
      "should staff get work record when staff is coordinating office and self nominate",
      "should staff get work record when staff in workrecord responsible office",
      "should staff get work record when staff in workrecord team",
      "should staff get work record when staff assigned to workrecord task",
      "should staff get work record when staff assigned to workrecord check list",
      "should staff get work record when staff is assignee pwc contact"
    ],
    "Children": []
  },
  {
    "$id": "30",
    "FileName": "AssigneeAccountStatusSectionFact.cs",
    "Description": "assignee account status section fact",
    "WhenList": [],
    "ThenList": [
      "should get assignee account status header when practice type is tax",
      "should get all assignees belong to selected engagement and practice type",
      "should get engagement as ANY when engagement criteria empty",
      "should not export invalid assignees"
    ],
    "Children": []
  },
  {
    "$id": "31",
    "FileName": "AssigneeCalendarSectionFact.cs",
    "Description": "assignee calendar section fact",
    "WhenList": [],
    "ThenList": [
      "should get assignee calendar header when practice type is tax",
      "should get all assignees calendar data belong to selected engagement and practice type",
      "should fetch next day data when have cross day travel",
      "should split to two records when have third location",
      "should split to two records when have third location cross day",
      "should not show destination country if assignee stay in one country for two days",
      "should not show activity out of selected days",
      "should export data even no calendar filled on those days",
      "should export data filtered by assignee home country",
      "should export data filtered by assignee assignments host country",
      "should export data filtered by assignee home country and host country",
      "should export data filtered by given country which may be both home or host country",
      "should export assignee calendar report with given assignee filter"
    ],
    "Children": [
      {
        "$id": "32",
        "FileName": "AssigneeCalendarSectionFact.cs",
        "Description": "location values",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "33",
    "FileName": "AssigneeCountryCustomFieldSectionFacts.cs",
    "Description": "assignee country custom field section facts",
    "WhenList": [],
    "ThenList": [
      "should get country custom fields data",
      "should not get country custom fields which on migration when current user not admin",
      "should get country custom fields with filter engagement",
      "should get country custom fields with filter lastname",
      "should get country custom fields with filter homecountry",
      "should get country custom fields data with assignee custom field country",
      "should staff not get restricted country custom field data with uac",
      "should get country custom field with filter practice type is tax",
      "should get country custom field with filter practice type is immigration",
      "should get data by practice type when assignee has multi engagements which have different practice type",
      "should get assignee custom fields different type",
      "should get data by practice type when assignee has multi engagements and country custom field has multi practice type",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get custom field data from deleted or inactive assignees"
    ],
    "Children": []
  },
  {
    "$id": "34",
    "FileName": "AssigneeEngagementCustomFieldSectionFacts.cs",
    "Description": "assignee engagement custom field section facts",
    "WhenList": [],
    "ThenList": [
      "should get custom fields data",
      "should not get engagement custom fields which on migration when current user not admin",
      "should get multi engagement customfield when assignee have multi engagement",
      "should get assignee custom fields by location and assignee engagement",
      "should get assignee custom fields with filter engagment",
      "should get assignee custom fields with filter assignee lastname",
      "should get assignee custom fields with filter assignee home country",
      "should get assignee custom fields different type",
      "with uac should get custom field which in engagement practice type same as staff",
      "should get custom field with filter practice type is tax",
      "should get custom field with filter practice type is immigration",
      "should get engagement custom field when no country custom field but assignee home country equal filter country custom field country",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get deleted or inactive assignee"
    ],
    "Children": []
  },
  {
    "$id": "35",
    "FileName": "AssigneePersonalDetailsSectionFacts.cs",
    "Description": "assignee personal details section facts",
    "WhenList": [],
    "ThenList": [
      "should get personal details data",
      "should get personal details data with filter engagement",
      "should get personal details data with filter lastname",
      "should get personal details data with filter homecountry",
      "should not get personal details data which on migration when current user not admin",
      "should get multi rows when assignee have multi engagement",
      "should get assignee when no coutry custom field but assignee home country equal filter country custom field country",
      "should get assignee in subscribed engagement when no engagement filter",
      "should get assignee when no coutry custom field and no with filter country custom field country",
      "should get personal details with filter practice type is tax",
      "should get personal details with filter practice type is immigration",
      "should get data by practice type when assignee has multi engagements which have different practice type",
      "should get personal details with filter tax year",
      "should get personal details with filter workrecord type",
      "should get personal details with filter team",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get deleted or inactive assignee"
    ],
    "Children": []
  },
  {
    "$id": "36",
    "FileName": "AssignmentDetailsSectionFacts.cs",
    "Description": "assignment details section facts",
    "WhenList": [],
    "ThenList": [
      "should get header",
      "should get assignment data",
      "should get assignment custom field only for selected engagement",
      "should get assignment with custom field name even without value",
      "should get assignment without custom fields when searching with all engagements",
      "should get personal details data with filter engagement",
      "should get data with filter lastname",
      "should not get assignment data from deleted or inactive assignee",
      "should get assignments custom field value when it contains special characters"
    ],
    "Children": []
  },
  {
    "$id": "37",
    "FileName": "CheckListStatusSectionFacts.cs",
    "Description": "check list status section facts",
    "WhenList": [],
    "ThenList": [
      "should get checklist status header correctly",
      "should get work record check list status data without filter",
      "should get work record check list status data with engagement filter",
      "should get work record check list status data with home country filter",
      "should get work record check list status data last name filter",
      "should get work record check list status data with country custom field country filter",
      "should not get work record check list status data apply work record public uac when staff not in subscribed offices",
      "should get work record check list status data apply work record staff in subscribed offices",
      "should get checklist status not contains status is cross out",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get from deleted assignee but include inactive assignee"
    ],
    "Children": []
  },
  {
    "$id": "38",
    "FileName": "CurrentlyWithSectionFacts.cs",
    "Description": "currently with section facts",
    "WhenList": [],
    "ThenList": [
      "should get currently with header when practice type is tax",
      "should get currently with data given when practice type is tax",
      "should get currently with data given when work record type is briefing",
      "should get current responsible staff when no responsibleid in task",
      "should get currently status task when practice type is tax",
      "should get revisions task first when have not complete revisions task",
      "should get task by filter",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get currently status from deleted assignees but include inactive assignee"
    ],
    "Children": []
  },
  {
    "$id": "39",
    "FileName": "EfileConsentEmployerReturnSectionFacts.cs",
    "Description": "efile consent employer return section facts",
    "WhenList": [],
    "ThenList": [
      "should append employer return related headers when reporting country is singapore",
      "should add employer return values when work record has employer return info",
      "should return employer return by status filter",
      "should return all employer return status if no employer return status filter provided"
    ],
    "Children": []
  },
  {
    "$id": "40",
    "FileName": "EfileReportSectionFacts.cs",
    "Description": "efile report section facts",
    "WhenList": [],
    "ThenList": [
      "should get correct header name when export efile consent report",
      "should get data when export efile consent report",
      "should not get data when tax return is not yet delivered",
      "should filter data by tax year",
      "should filter data by engagement",
      "should filter data by country",
      "should not filter data by is efile consent on",
      "should filter data by downloaded status",
      "should filter data by consent status",
      "should get multi engagement data",
      "should not get data when staff can not view public work record",
      "should get data when staff is in efile group",
      "should not get data of engaged office when staff in efile group",
      "should return false when current user is global admin while some assignees are restricted",
      "should return false when current user is on acl while some assignees are restricted",
      "should return false when current user is not on contact list while some assignees are restricted",
      "should return false when all assignees are normal",
      "should return false when current user in efile group for restricted assigneed",
      "should return true when current user is not on acl or contact while some assignees are restricted",
      "should not get data when assignee is restricted",
      "should get data when assignee is restricted and current staff on acl",
      "should get data when assignee is restricted and current staff is global admin",
      "should get data when assignee is restricted and current staff on contact",
      "should get data when export efile consent assignee is restricted and current staff in efile group",
      "should not get data from invalid assignees"
    ],
    "Children": []
  },
  {
    "$id": "41",
    "FileName": "ExcelNameAndTabsFacts.cs",
    "Description": "excel name and tabs facts",
    "WhenList": [],
    "ThenList": [
      "should get corret excel name and tabs",
      "should get correct excel name and tabs when select single section"
    ],
    "Children": []
  },
  {
    "$id": "42",
    "FileName": "ImmigrationApplicationStandardReportSectionFact.cs",
    "Description": "immigration application standard report section fact",
    "WhenList": [],
    "ThenList": [
      "should get work record details header when is immigration application",
      "should get valid data with immigrartion application filter",
      "should get current service tasks responsibilities of in preparation milestone for immigration work record with two applications",
      "should get current service task responsibilities of immigration workrecord with two applications in different service milestone",
      "should get current service task responsibilities of immigration workrecord with a task template",
      "should get work milestone current task responsibility when first task is finished and second task is crossed out",
      "should get work milestone current task responsibilities when first task finished",
      "should show different color for different work record with immigrartion application filter"
    ],
    "Children": []
  },
  {
    "$id": "43",
    "FileName": "MissingInformationSectionFacts.cs",
    "Description": "missing information section facts",
    "WhenList": [],
    "ThenList": [
      "should get missing information header when practice type is tax",
      "should get missing information data given missing items from assignee when practice type is tax",
      "should get missing information data given missing items from pw c when practice type is tax",
      "should get missing information data given missing items from client when practice type is tax",
      "should get missing information data given missing items the received date same identified date when practice type is tax",
      "should get missing information data with filter engagement when practice type is tax",
      "should get missing information data with filter home country when practice type is tax",
      "should get missing information data with filter last name when practice type is tax",
      "should get missing information data with filter work record country when practice type is tax",
      "should get missing information data with filter tax year when practice type is tax",
      "should get missing information data with filter primary service when practice type is tax",
      "should get missing information data with filter responsible office when practice type is tax",
      "should not get missing information data with work record private uac rules when staff in coordinating office but not self nominate",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get missing information from deleted assignees but include inactive assignees"
    ],
    "Children": []
  },
  {
    "$id": "44",
    "FileName": "OutOfScopeWorkSectionFacts.cs",
    "Description": "out of scope work section facts",
    "WhenList": [],
    "ThenList": [
      "should get out of scope work section header",
      "should get out of scope work section data",
      "should not get data from deleted but include inactive assignee",
      "should get out of scope work section with filter"
    ],
    "Children": []
  },
  {
    "$id": "45",
    "FileName": "QuestionnaireDistributionReportSectionFact.cs",
    "Description": "questionnaire distribution report section fact",
    "WhenList": [],
    "ThenList": [
      "should export tax questionnaire distribution",
      "should exclude FBA returns and canadian non income returns",
      "should seperate fiscal year and calendar year in report"
    ],
    "Children": []
  },
  {
    "$id": "46",
    "FileName": "QuestionnaireSectionFacts.cs",
    "Description": "questionnaire section facts",
    "WhenList": [],
    "ThenList": [
      "should get questionnaire header when practice type is tax",
      "should get work record details data when practice type is tax",
      "should get work record details data when practice type is tax and has team name",
      "should get work record details data when practice type is tax and has team name and contact is null",
      "should get work record details data when practice type is immigration and has team name",
      "should get work record details data when questionnaire contact office not in the same country with the primary service",
      "should get questionnaire header when practice type is immigration",
      "should get work record details data when practice type is immigration",
      "should get questionnaire header when practice type is social security",
      "should not get work record questionnaire data when practice type is scoial security",
      "should get work record details data with questionnaire status filter",
      "should get work record details data with work record country filter",
      "should get work record details data with team filter",
      "should get work record details data with work record year",
      "should get qestionnaire set name tracking when questionnaire id is default value practice type is tax",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get work record details data from deleted assignees but include inactive assignees"
    ],
    "Children": []
  },
  {
    "$id": "47",
    "FileName": "QuestionnaireStandardReportSectionFact.cs",
    "Description": "questionnaire standard report section fact",
    "WhenList": [],
    "ThenList": [
      "should get questionnaire header when practice type is tax",
      "should get right cell value with filters",
      "should get valid data with practice filter",
      "should get valid data with practice filter for immigration",
      "should get valid data with engagement filter",
      "should not get data from deleted assignees but include inactive assignees"
    ],
    "Children": []
  },
  {
    "$id": "48",
    "FileName": "ServiceEvaluationSectionFacts.cs",
    "Description": "service evaluation section facts",
    "WhenList": [],
    "ThenList": [
      "should get service evaluation header when practice type is tax",
      "should get service evaluation data when practice type is tax and complete",
      "should get service evaluation correct data with home country filter when practice type is tax",
      "should get service evaluation header when practice type is socail security",
      "should get service evaluation data when practice type is social security",
      "should get service evaluation header when practice type is immigration",
      "should get service evaluation data when practice type is immigration",
      "should OFF when evaluation not exist",
      "should not send when evaluation create but not send",
      "should OFF when evaluation create but evaluation is turned off later on engagement",
      "should not influence by turnning off on engagement after evaluation sent",
      "should OFF when evaluation create but evaluation is turned off later on workrecord",
      "should not influence by turnning off on workrecord after evaluation sent",
      "should send when evaluation send but not submit",
      "should not get service evaluation data from deleted assignees but include inactive assignees"
    ],
    "Children": []
  },
  {
    "$id": "49",
    "FileName": "TaskStatusSectionFacts.cs",
    "Description": "task status section facts",
    "WhenList": [],
    "ThenList": [
      "should get task status header correctly",
      "should get work record task status data without filter",
      "should get work record revision task status data",
      "should get work record task status data for mutli assignment",
      "should get milestone name of by practice type and work record type",
      "should get online briefing work record milestone notify and schedule without responsible office and staff",
      "should get work record task status data with engagement filter",
      "should not get work record task status data apply work record public uac when staff not in subscribed office",
      "should get work record task status data apply work record public uac when staff in work office",
      "should get task status not contain status is cross out",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get task status from deleted assignees but inactive assignees"
    ],
    "Children": []
  },
  {
    "$id": "50",
    "FileName": "TaxEqualizationSectionFacts.cs",
    "Description": "tax equalization section facts",
    "WhenList": [],
    "ThenList": [
      "should get tax equalization header when practice type is tax",
      "should get tax equalization data when practice type is tax",
      "should get tax equalization data with filter engagement when practice type is tax",
      "should get tax equalization data with filter home country when practice type is tax",
      "should get tax equalization with filter last name when practice type is tax",
      "should tax equalizaiton data with filter work record country when practice type is tax",
      "should get tax equalization data with filter tax year when practice type is tax",
      "should get tax equalization data with filter primary service when practice type is tax",
      "should get tax equalization data with filter responsible office when practice type is tax",
      "should not get tax equalization data with work record private uac rules when staff in coordinating office but not self nominate",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get tax equalization data from deleted assignees but inactive assignees"
    ],
    "Children": []
  },
  {
    "$id": "51",
    "FileName": "TaxReturnReportSectionFact.cs",
    "Description": "tax return report section fact",
    "WhenList": [],
    "ThenList": [
      "should get tax return headers",
      "should get tax return body",
      "should have non downloaded prefix filename when exporting tax returns that have not been downloaded",
      "should have no prefix in filename when exporting tax returns that have been downloaded",
      "should have no prefix in filename when exporting all tax returns"
    ],
    "Children": []
  },
  {
    "$id": "52",
    "FileName": "WorkRecordDetailsSectionFacts.cs",
    "Description": "work record details section facts",
    "WhenList": [],
    "ThenList": [
      "should get work record details header when practice type is tax not included briefing",
      "should get work record details data when practice type is tax",
      "should get work record details data with questioniar when practice type is tax",
      "should get work record details data without questioniar when practice type is tax",
      "should get work record details data and contact office country abbr is office country when office country diff work record country",
      "should get imm work record details data and contact office country abbr is office country when office country diff work record country",
      "should get ss work record details data and contact office country abbr is office country when office country diff work record country",
      "should task templete empty when use default task templete",
      "should not get work record details data when practice type is tax and current user not in subscribed office the work record relate",
      "should get work record details data when current user not in subscribed office the work record relate but in work record team",
      "should not get work record details data when current user in related engagement team but not the sepcific wr",
      "should get work record details correct data with engagement filter when practice type is tax",
      "should get work record details correct data with home country filter when practice type is tax",
      "should get work record details correct data with last name filter when practice type is tax",
      "should get work record details correct data with filter country custom field country when practice type is tax",
      "should get work record details correct data with work record country filter when practice type is tax",
      "should get work record details correct data with tax year filter when practice type is tax",
      "should get work record details correct data with work record type filter when practice type is tax",
      "should get work record details correct data with work record type filter when practice type is ss",
      "should get work record details correct data with primary service filter when practice type is tax",
      "should get work record details correct data with responsible office filter",
      "should get work record details correct data with team filter",
      "should get work record details header when work record type is social security coc",
      "should get work record details header when work record type is social security other compliance",
      "should get work record details data when work record type is social security coc",
      "should get work record details data when work record type is social security other compliance",
      "should get work record details header when practice type is immigration not included briefing",
      "should get work record details data when practice type is immigration",
      "should get work record details data when practice type is tax and tax year is null",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should get london work records when engagement subscribes offices london and shanghai for non country level role in london",
      "should get shanghai work records when engagement subscribes offices london and shanghai for non country level role in london",
      "should not get manchester work records when engagement subscribes offices manchester and shanghai for non country level role in london",
      "should not get shanghai work records when engagement subscribes offices manchester and shanghai for non country level role in london",
      "should get london work records when engagement subscribes offices london and shanghai for country level role in london",
      "should get shanghai work records when engagement subscribes offices london and shanghai for country level role in london",
      "should get manchester work records when engagement subscribes offices manchester and shanghai for country level role in london",
      "should get shanghai work records when engagement subscribes offices manchester and shanghai for country level role in london"
    ],
    "Children": [
      {
        "$id": "53",
        "FileName": "WorkRecordDetailsSectionFacts.cs",
        "Description": "should not export from invalid assignee",
        "WhenList": [],
        "ThenList": [
          "when practice type is tax",
          "when practice type is social security",
          "when practice type is immigration"
        ],
        "Children": []
      }
    ]
  },
  {
    "$id": "54",
    "FileName": "WorkRecordDetailsSectionForBriefingFacts.cs",
    "Description": "work record details section for briefing facts",
    "WhenList": [],
    "ThenList": [
      "should get work record details header when work record type is briefing",
      "should get work record details data when work record is tax briefing",
      "should get work record details data when work record is social security briefing",
      "should get empty briefing method when online briefing work record not completed yet"
    ],
    "Children": []
  },
  {
    "$id": "55",
    "FileName": "WorkRecordNoteSectionFacts.cs",
    "Description": "work record note section facts",
    "WhenList": [],
    "ThenList": [
      "should get work record notes header when practice type is tax",
      "should get work record note data when practice type is tax",
      "should get work record note data when practice type is tax and author is null",
      "should not get work record note data when current user not in restricted engagement acl",
      "should not get workrecord note when staff is not on restricted assignee acl list",
      "should get work record note when practice type is immigration"
    ],
    "Children": [
      {
        "$id": "56",
        "FileName": "WorkRecordNoteSectionFacts.cs",
        "Description": "should not get work record note from invalid assignee",
        "WhenList": [],
        "ThenList": [
          "when practice type is tax",
          "when practice type is social security",
          "when practice type is immigration"
        ],
        "Children": []
      }
    ]
  },
  {
    "$id": "57",
    "FileName": "WorkRecordStandardCountryLevelReportSectionCustomFieldFact.cs",
    "Description": "work record standard country level report section custom field fact",
    "WhenList": [],
    "ThenList": [
      "should get custom field name with multiple custom fields",
      "should get custom field name with different practice type",
      "should get custom field name when custom field has multiple practice types",
      "should not load custom field when not specified country in search request",
      "should put custom field column after emplyer return info in report header",
      "should not load custom field when current user is in office which not subscribed engagement",
      "should load custom field when specified engagement and current user is in coordinating office",
      "should load custom field when specified engagement and current user is in work office",
      "should load custom field when specified engagement and current user is in delegated coordinating office",
      "should load custom field when specified engagement and current user is country level role",
      "should load custom field value",
      "should load restricted custom field value when specified engagement and current user is self nominated and in coordinating office",
      "should load restricted custom field value when specified engagement and current user is self nominated and in delegated coordinating office",
      "should load restricted custom field value when specified engagement and current user is in responsible office",
      "should load restricted custom field value when specified engagement and current user is assigned to a task",
      "should load restricted custom field value when specified engagement and current user is pw c contact",
      "should mask restricted custom field value with asterisks when specified engagement and current user only in subscribed office"
    ],
    "Children": []
  },
  {
    "$id": "58",
    "FileName": "WorkRecordStandardCountryLevelReportSectionFact.cs",
    "Description": "work record standard country level report section fact",
    "WhenList": [],
    "ThenList": [
      "should get work record details header when work record type is tax return",
      "should get work record details header when work record type is immigration general",
      "should get work record details header when work record type is immigration application",
      "should get work record details header when work record type is social security coc",
      "should get work record details header when work record type is social security other compliance",
      "should not get work record details when practice type is tax and current user not country level",
      "should get right header value with filters",
      "should get beijing workrecord when current user in shanghai office",
      "should get beijing workrecord when current user in shanghai office for immi workrecord",
      "should get valid data with practice filter for immi workrecord and current user is country level",
      "should not get subscribe workrecord when responsible office not in country",
      "should filter by workrecord country",
      "should filter by tax year",
      "should filter immigration work record by year",
      "should get team name as questionnaire contact",
      "should filter by practice type",
      "should filter by workrecord type",
      "should filter all tax return and other compliance when workrecord type is tax return and other compliance",
      "should not export from deleted assignee but include inactive assignee",
      "should get data when current milestone is created",
      "should get valid data when current user not in restricted engagement acl but is country level",
      "should get valid data when current user not in restricted engagement acl but is global admin",
      "should get valid data when current user not in restricted assignee acl but is country level",
      "should return forbidden when current user is not country level",
      "should get right expiry date when prictace type is social security",
      "should get right certificate start date when prictace type is social security",
      "should not include certificate start date when work record type is social security other compliance",
      "should show billing status as billed or not billed",
      "should export out of scope work count",
      "should leave out of scope work count blank if there is no out of scope",
      "should get employer return info header when work record type is singapore tax return",
      "should export employer return file content for tax return work record in singapore",
      "should not export employer return info if employer return toggle is off",
      "should export team for work record report",
      "should export primary service for work record report",
      "should get questionnaire status for immi workrecord"
    ],
    "Children": []
  },
  {
    "$id": "59",
    "FileName": "WorkRecordStandardCountryLevelReportSectionFactForBriefing.cs",
    "Description": "work record standard country level report section fact for briefing",
    "WhenList": [],
    "ThenList": [
      "should get work record details header when work record type is tax briefing",
      "should get work record details header when work record type is immigration briefing",
      "should get work record details header when work record type is social security briefing",
      "should get correct value when work record type is tax briefing",
      "should get correct value when work record type is immigration briefing",
      "should get work record details header when is immigration briefing",
      "should get correct value when work record type is social security briefing",
      "should get empty briefing method when online briefing work record not completed yet"
    ],
    "Children": []
  },
  {
    "$id": "60",
    "FileName": "WorkRecordStandardCountryLevelReportSectionForCurrentlyWithFact.cs",
    "Description": "work record standard country level report section for currently with fact",
    "WhenList": [],
    "ThenList": [
      "should get current task responsibility when get country level work record report",
      "should get empty when normal task has responsibility but revision task does not have responsibility",
      "should get distinct created and started task responsibilities on current milestone for immigration practice type"
    ],
    "Children": []
  },
  {
    "$id": "61",
    "FileName": "WorkRecordStandardCountryLevelReportSectionForCurrentTaskOfficeFact.cs",
    "Description": "work record standard country level report section for current task office fact",
    "WhenList": [],
    "ThenList": [
      "should get empty current task office when no task is start",
      "should get current task office when normal task started",
      "should get current created revision task office when normal task started",
      "should get current normal task office when normal task started and revision task is done or crossed out",
      "should get distinct current task office when more than one revision tasks are started in same office",
      "should get multi current revision task office when revision task is created or started"
    ],
    "Children": []
  },
  {
    "$id": "62",
    "FileName": "WorkRecordStandardCountryLevelReportSectionForCurrentTaskStartedDateFact.cs",
    "Description": "work record standard country level report section for current task started date fact",
    "WhenList": [],
    "ThenList": [
      "should get empty current task started date when no task is start",
      "should get empty current task started date when normal task is started but revision task is created",
      "should get current task started date when normal task started",
      "should get current task started date when revision task started",
      "should get two current task started date when two revision task started on different date",
      "should get one current task started date when two revision task started on same date",
      "should not get current task started date for immigration work record",
      "should not get current task started date for briefing work record"
    ],
    "Children": []
  },
  {
    "$id": "63",
    "FileName": "WorkRecordStandardReportSectionCustomFieldFact.cs",
    "Description": "work record standard report section custom field fact",
    "WhenList": [],
    "ThenList": [
      "should get custom field name with multiple custom fields",
      "should get custom field name with different practice type",
      "should get custom field name when custom field has multiple practice types",
      "should not load custom field when not specified country in search request",
      "should put custom field column after emplyer return info in report header",
      "should not load custom field when current user is in office which not subscribed engagement",
      "should load custom field when specified engagement and current user is in coordinating office",
      "should load custom field when specified engagement and current user is in work office",
      "should load custom field when specified engagement and current user is in delegated coordinating office",
      "should load custom field when specified engagement and current user is country level role",
      "should load custom field value",
      "should load restricted custom field value when specified engagement and current user is self nominated and in coordinating office",
      "should load restricted custom field value when specified engagement and current user is self nominated and in delegated coordinating office",
      "should load restricted custom field value when specified engagement and current user is in responsible office",
      "should load restricted custom field value when specified engagement and current user is assigned to a task",
      "should load restricted custom field value when specified engagement and current user is pw c contact",
      "should mask restricted custom field value with asterisks when specified engagement and current user only in subscribed office"
    ],
    "Children": []
  },
  {
    "$id": "64",
    "FileName": "WorkRecordStandardReportSectionFact.cs",
    "Description": "work record standard report section fact",
    "WhenList": [],
    "ThenList": [
      "should get work record details header when is tax return",
      "should show frontload column when generate report for tax return report after 2015",
      "should not show frontload column in report header",
      "should get work record details header when is tax other",
      "should get work record details header when is immigration general",
      "should get work record details header when is social security coc",
      "should get work record details header when is social security other compliance",
      "should get right cell value with filters",
      "should get valid data with practice filter",
      "should get valid data without frontload and cycle time kpi for tax return work record before 2015",
      "should not show front load kpi column header after days in house column when work record report filter is before 2015",
      "should get valid data with practice filter is tax other",
      "should get valid data with practice filter for immi workrecord",
      "should not show different color for different work record with not immigrartion application filter",
      "should not get valid data when current user not subscribed the work record engagement",
      "should not get valid data when current user not in restricted engagement acl",
      "should get valid data when current user not in restricted engagement acl but is global admin",
      "should not get valid data when current user not in restricted assignee acl",
      "should get valid data when current user not in restricted assignee acl but is global admin",
      "should get valid data with work record type filter",
      "should get valid data with work record type filter as tax return and other compliance",
      "should get valid data and questionnaire contact is team name",
      "should get valid data with responsible office filter",
      "should get valid data with team filter",
      "should get valid data with work record country filter",
      "should get valid data with work record year filter and practicetype is tax",
      "should get valid data with work record year filter and practicetype is immigration",
      "should get valid data with engagement filter",
      "should get data when current milestone is created and current resposibility is null",
      "should get right expiry date when prictace type is social security",
      "should get right certificate start date when prictace type is social security",
      "should not include certificate start date when work record type is social security other compliance",
      "should filter out work record of deleted assignee but inactive assignee",
      "should show billing status as billed or not billed for non tax work record",
      "should show billing status as billed or not billed",
      "should export out of scope work count",
      "should leave out of scope work count blank if there is no out of scope",
      "should have employer return file header for not briefing work record with tax practice type in singapore country",
      "should export employer return file content for tax return work record in singapore",
      "should export employer return file header for tax return work record without employer return file in singapore",
      "should export team for work record report for immigration briefing and social security",
      "should export team for work record report for tax return and other compliance",
      "should export primary service for work record report",
      "should get questionnaire status for immi workrecord",
      "should set employer return info header style correctly",
      "should not export employer return info if emloyer return toggle is off"
    ],
    "Children": []
  },
  {
    "$id": "65",
    "FileName": "WorkRecordStandardReportSectionForBriefingFact.cs",
    "Description": "work record standard report section for briefing fact",
    "WhenList": [],
    "ThenList": [
      "should get correct column header for tax briefing work record",
      "should get correct header for immigration and social security briefing work record",
      "should get valid data for tax briefing work record",
      "should get valid data for immigration briefing work record",
      "should get valid data for social security briefing work record",
      "should get empty briefing kpi when briefing work record has no kpi data",
      "should get empty briefing method when online briefing work record not completed yet"
    ],
    "Children": []
  },
  {
    "$id": "66",
    "FileName": "WorkRecordStandardReportSectionForCurrentlyWithFact.cs",
    "Description": "work record standard report section for currently with fact",
    "WhenList": [],
    "ThenList": [
      "should get current task responsibility when current milestone has multiple normal tasks",
      "should get empty when normal task with responsibility has started but revision task without responsibility is created",
      "should get created and started task responsibilities of current milestone for immigration practice type"
    ],
    "Children": []
  },
  {
    "$id": "67",
    "FileName": "WorkRecordStandardReportSectionForCurrentTaskOfficeFact.cs",
    "Description": "work record standard report section for current task office fact",
    "WhenList": [],
    "ThenList": [
      "should get empty current task office when no task is start",
      "should get current task office when normal task started",
      "should get current created revision task office when normal task started",
      "should get current normal task office when normal task started and revision task is done or crossed out",
      "should get multi current revision task office when revision task status is created or started",
      "should get distinct current task office when more than one revision tasks are started in same office"
    ],
    "Children": []
  },
  {
    "$id": "68",
    "FileName": "WorkRecordStandardReportSectionForCurrentTaskStartedDateFact.cs",
    "Description": "work record standard report section for current task started date fact",
    "WhenList": [],
    "ThenList": [
      "should get empty current task started date no task is started",
      "should get empty current task started date when normal task is started but revision task is created",
      "should get current task started date when normal task started",
      "should get current task started date when revision task started",
      "should get two current task started date when two revision task started on different date",
      "should get one current task started date when two revision task started on same date",
      "should not get current task started date for immigration work record",
      "should not get current task started date for briefing work record"
    ],
    "Children": []
  },
  {
    "$id": "69",
    "FileName": "WRCountryCustomFieldSectionFacts.cs",
    "Description": "WR country custom field section facts",
    "WhenList": [],
    "ThenList": [
      "should get wr country custom field section header",
      "should get wr country custom field section data",
      "should get wr country custom field section data with work record country filter",
      "should get open wr country custom field section data with private uac when staff only in work office",
      "should not get restricted wr country custom field section data with private uac when staff only in work office",
      "should get restricted wr country custom field section data with private uac when staff only in coordinating office and self nominate",
      "should get work record custom fields different type",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get data from deleted assignee but include inactive assignee"
    ],
    "Children": []
  },
  {
    "$id": "70",
    "FileName": "WREngagementCustomFieldSectionFacts.cs",
    "Description": "WR engagement custom field section facts",
    "WhenList": [],
    "ThenList": [
      "should get wr engagement custom field section header",
      "should get wr engagement custom field section data",
      "should get wr engagement custom field section data with engagement filter",
      "should get open wr engagement custom field section data with private uac when staff only in coordinating office",
      "should not get restricted wr engagement custom field section data with private uac when staff only in coordinating office",
      "should get restricted wr engagement custom field section data with private uac when staff in coordinating office and self nominate",
      "should get assignee custom fields different type",
      "should get restricted assignee when current user in acl",
      "should get restricted assignee when current user is global admin",
      "should get restricted assignee when current user is primary contact",
      "should not get restricted assignee when current user is not contact and not in acl",
      "should not get data from deleted but include inactive assignee"
    ],
    "Children": []
  },
  {
    "$id": "71",
    "FileName": "when_get_billing_overview.cs",
    "Description": "when get billing overview",
    "WhenList": [],
    "ThenList": [
      "should get office billing overview even if it has no ready work record",
      "should get office billing overview with different work record type"
    ],
    "Children": []
  },
  {
    "$id": "72",
    "FileName": "when_get_billing_feature.cs",
    "Description": "when get billing feature",
    "WhenList": [],
    "ThenList": [
      "should get billing feature"
    ],
    "Children": []
  },
  {
    "$id": "73",
    "FileName": "when_get_engagement_billing_model.cs",
    "Description": "when get engagement billing model",
    "WhenList": [],
    "ThenList": [
      "should get engagement billing model"
    ],
    "Children": []
  },
  {
    "$id": "74",
    "FileName": "when_update_engagement_billing_model.cs",
    "Description": "when update engagement billing model",
    "WhenList": [],
    "ThenList": [
      "should fail if engagement fee does not exist when update",
      "should return error if current billing model has been set",
      "should return error if invalid billing model is specified",
      "should not set billing model as not set"
    ],
    "Children": []
  },
  {
    "$id": "75",
    "FileName": "when_update_engagement_billing_model_to_centralized.cs",
    "Description": "when update engagement billing model to centralized",
    "WhenList": [],
    "ThenList": [
      "should update to centralized billing model"
    ],
    "Children": []
  },
  {
    "$id": "76",
    "FileName": "when_update_engagement_billing_model_to_decentralized.cs",
    "Description": "when update engagement billing model to decentralized",
    "WhenList": [],
    "ThenList": [
      "should update to decentralized billing model"
    ],
    "Children": []
  },
  {
    "$id": "77",
    "FileName": "when_batch_update_billing_country_fees.cs",
    "Description": "when batch update billing country fees",
    "WhenList": [],
    "ThenList": [
      "when update a billing country fee"
    ],
    "Children": []
  },
  {
    "$id": "78",
    "FileName": "when_create_centralized_engagement_fee_setting.cs",
    "Description": "when create centralized engagement fee setting",
    "WhenList": [],
    "ThenList": [
      "should return error when billing model is not match",
      "should create engagement fee setting and billing model"
    ],
    "Children": []
  },
  {
    "$id": "79",
    "FileName": "when_create_delete_or_update_centralized_engagement_type_of_service_fee.cs",
    "Description": "when create delete or update centralized engagement type of service fee",
    "WhenList": [],
    "ThenList": [
      "should update engagement type of service fee",
      "should not update engagement type of service fee if it does not belong to the engagement fee setting",
      "should return error when update engagement type of service fee if billing model is not set",
      "should create engagement type of service fee",
      "should create engagement type of service fees for same type of service but different engagements",
      "should create engagement type of service fees for same engagement but different type of services",
      "should not create engagement type of service fees for same engagement and same type of services",
      "should create engagement type of service fee with country",
      "should create engagement type of service fee with currency according to default external currency",
      "should return error when create engagement type of service fee if billing model is not centralized",
      "should return error when create engagement type of service fee but currency is not found by country",
      "should delete engagement type of service fee",
      "should delete billing country fees when delete a centralized engagement type of service fee which service country is US",
      "should not delete engagement type of service fee if it does not belong to engagement fee setting",
      "should return error when engagement is not found in billing service and try to update etos fees",
      "should return error when engagement is not found in billing service and try to create or delete etos fees",
      "should not change currency when update internal fee",
      "should save internal fee currency according to internal fee currency mode when create new engagement type of service fee"
    ],
    "Children": []
  },
  {
    "$id": "80",
    "FileName": "when_get_billing_country_fees.cs",
    "Description": "when get billing country fees",
    "WhenList": [],
    "ThenList": [
      "should get billing country fees by engagement type of service fee id"
    ],
    "Children": []
  },
  {
    "$id": "81",
    "FileName": "when_get_centralized_engagement_fee_setting.cs",
    "Description": "when get centralized engagement fee setting",
    "WhenList": [],
    "ThenList": [
      "should get null if engagement fee does not exist",
      "should get engagement fee setting"
    ],
    "Children": []
  },
  {
    "$id": "82",
    "FileName": "when_get_centralized_engagement_type_of_service_fee.cs",
    "Description": "when get centralized engagement type of service fee",
    "WhenList": [],
    "ThenList": [
      "should not get fee if billing model is not set",
      "should get fee if billing model is centralized",
      "should not return engagement type of service fee if it does not belong to engagement fee setting"
    ],
    "Children": []
  },
  {
    "$id": "83",
    "FileName": "when_get_centralized_engagement_type_of_service_fee_with_billing_country_count.cs",
    "Description": "when get centralized engagement type of service fee with billing country count",
    "WhenList": [],
    "ThenList": [
      "should return billing country count for us service",
      "should not return billing country count for service not us"
    ],
    "Children": []
  },
  {
    "$id": "84",
    "FileName": "when_update_centralized_engagement_fee_settings.cs",
    "Description": "when update centralized engagement fee settings",
    "WhenList": [],
    "ThenList": [
      "should update all engagement services currency and reset amount to null for external fee",
      "should able to update engagement internal fee currency mode",
      "should reset internal fee currency when update engagement internal fee currency mode from as external to local",
      "should reset internal fee amount when update engagement internal fee currency mode from as external to local",
      "should reset internal fee currency when update engagement internal fee currency mode from local to as external",
      "should reset internal fee amount when update engagement internal fee currency mode from local to as external",
      "should not reset internal fee amount in local mode when only update engagement external fee currency",
      "should not reset internal fee currency in local mode when only update engagement external fee currency",
      "should reset internal fee amount in as external mode when only update engagement external fee currency",
      "should reset internal fee currency in as external mode when only update engagement external fee currency",
      "should not reset external fee amount when only update internal fee currency mode",
      "should not reset external fee currency when only update internal fee currency mode",
      "should clear all billing country fees of engagement type of services in the engagement when update internal fee currency mode to as external and change back"
    ],
    "Children": []
  },
  {
    "$id": "85",
    "FileName": "when_get_country_currencies.cs",
    "Description": "when get country currencies",
    "WhenList": [],
    "ThenList": [
      "should get country currencies"
    ],
    "Children": []
  },
  {
    "$id": "86",
    "FileName": "when_create_delete_and_update_country_type_of_service_fees.cs",
    "Description": "when create delete and update country type of service fees",
    "WhenList": [],
    "ThenList": [
      "should update country type of service fee",
      "should create country type of service fee"
    ],
    "Children": []
  },
  {
    "$id": "87",
    "FileName": "when_get_country_type_of_service_fees.cs",
    "Description": "when get country type of service fees",
    "WhenList": [],
    "ThenList": [
      "should get country type of service fee by ids"
    ],
    "Children": []
  },
  {
    "$id": "88",
    "FileName": "when_create_delete_or_update_decentralized_engagement_type_of_service_fee.cs",
    "Description": "when create delete or update decentralized engagement type of service fee",
    "WhenList": [],
    "ThenList": [
      "should update engagement type of service fee",
      "should not update engagement type of service fee if its billing model is not found",
      "should not update engagement type of service fee if its billing model is not matched",
      "should create engagement type of service fee",
      "should create engagement type of service fees for same type of service but different engagements",
      "should create engagement type of service fees for same engagement but different type of services",
      "should not create engagement type of service fees for same engagements and same type of services",
      "should not create engagement type of service fee if billing model is not decentralized",
      "should delete engagement type of service fee"
    ],
    "Children": []
  },
  {
    "$id": "89",
    "FileName": "when_get_decentralized_engagement_type_of_service_fee.cs",
    "Description": "when get decentralized engagement type of service fee",
    "WhenList": [],
    "ThenList": [
      "should not get fee if billing model is not match",
      "should get fee if billing model is decentralized"
    ],
    "Children": []
  },
  {
    "$id": "90",
    "FileName": "when_engagement_created.cs",
    "Description": "when engagement created",
    "WhenList": [],
    "ThenList": [
      "should create billing model",
      "should create billing feature"
    ],
    "Children": []
  },
  {
    "$id": "91",
    "FileName": "CreateAccountFacts.cs",
    "Description": "create account facts",
    "WhenList": [],
    "ThenList": [
      "should create account",
      "should return null when create failed"
    ],
    "Children": []
  },
  {
    "$id": "92",
    "FileName": "CreateSubscriptionFacts.cs",
    "Description": "create subscription facts",
    "WhenList": [],
    "ThenList": [
      "should create subscription",
      "should create my travel subscription",
      "should return null when create error"
    ],
    "Children": []
  },
  {
    "$id": "93",
    "FileName": "FeedFacts.cs",
    "Description": "feed facts",
    "WhenList": [],
    "ThenList": [
      "should get feed since account setting changed"
    ],
    "Children": []
  },
  {
    "$id": "94",
    "FileName": "GetAccountFacts.cs",
    "Description": "get account facts",
    "WhenList": [],
    "ThenList": [
      "should get account",
      "should get null when account does not exist"
    ],
    "Children": []
  },
  {
    "$id": "95",
    "FileName": "GetSubscriptionFacts.cs",
    "Description": "get subscription facts",
    "WhenList": [],
    "ThenList": [
      "should get assignee with subscriptions"
    ],
    "Children": []
  },
  {
    "$id": "96",
    "FileName": "ResetAccountFacts.cs",
    "Description": "reset account facts",
    "WhenList": [],
    "ThenList": [
      "should create subscription"
    ],
    "Children": []
  },
  {
    "$id": "97",
    "FileName": "UpdateAccountFacts.cs",
    "Description": "update account facts",
    "WhenList": [],
    "ThenList": [
      "should get updated account when update account success",
      "should return null when update failed"
    ],
    "Children": []
  },
  {
    "$id": "98",
    "FileName": "DeleteFacts.cs",
    "Description": "delete facts",
    "WhenList": [],
    "ThenList": [
      "should be able to delete file"
    ],
    "Children": []
  },
  {
    "$id": "99",
    "FileName": "DownLoadFacts.cs",
    "Description": "down load facts",
    "WhenList": [],
    "ThenList": [
      "should be able to upload all kinds of files with doctype",
      "should be able to download multiple files"
    ],
    "Children": []
  },
  {
    "$id": "100",
    "FileName": "GetFacts.cs",
    "Description": "get facts",
    "WhenList": [],
    "ThenList": [
      "should be able to get file info",
      "should not be able to get file info"
    ],
    "Children": []
  },
  {
    "$id": "101",
    "FileName": "UploadFacts.cs",
    "Description": "upload facts",
    "WhenList": [],
    "ThenList": [
      "should be able to upload one file",
      "should be able to upload multiple files"
    ],
    "Children": []
  },
  {
    "$id": "102",
    "FileName": "FileSharingFacts.cs",
    "Description": "file sharing facts",
    "WhenList": [],
    "ThenList": [
      "should list box engagement folders",
      "should list folders and accesses",
      "should create new collaborator with given folder access",
      "should get correct new client file sharing toggle"
    ],
    "Children": []
  },
  {
    "$id": "103",
    "FileName": "MyMobilityAuthorizationListFacts.cs",
    "Description": "my mobility authorization list facts",
    "WhenList": [],
    "ThenList": [
      "should get mymobility user access by authorization id",
      "should get mymobility user access by email",
      "should update mymobility user access by authorization id"
    ],
    "Children": []
  },
  {
    "$id": "104",
    "FileName": "MyMobilityServiceInitiationFacts.cs",
    "Description": "my mobility service initiation facts",
    "WhenList": [],
    "ThenList": [
      "should get service initiation settings",
      "should save service initiation settings"
    ],
    "Children": []
  },
  {
    "$id": "105",
    "FileName": "MyMobilityUserFacts.cs",
    "Description": "my mobility user facts",
    "WhenList": [],
    "ThenList": [
      "should validate email domain",
      "should update user base info",
      "should update user subscriptions tiles",
      "should update folder access",
      "should update user custom field filters"
    ],
    "Children": []
  },
  {
    "$id": "106",
    "FileName": "NotificationServiceFacts.cs",
    "Description": "notification service facts",
    "WhenList": [],
    "ThenList": [
      "should send email through old api",
      "should send email through new api"
    ],
    "Children": []
  },
  {
    "$id": "107",
    "FileName": "SendFacts.cs",
    "Description": "send facts",
    "WhenList": [],
    "ThenList": [
      "should not throw exception when sending correct request to notification service"
    ],
    "Children": []
  },
  {
    "$id": "108",
    "FileName": "GetAssigneeApiFacts.cs",
    "Description": "get assignee api facts",
    "WhenList": [],
    "ThenList": [
      "should get assignee by go id",
      "should get assignee by tiger id",
      "should get assignees events"
    ],
    "Children": []
  },
  {
    "$id": "109",
    "FileName": "WorkRecordApiFacts.cs",
    "Description": "work record api facts",
    "WhenList": [],
    "ThenList": [
      "should get tax work record",
      "should get immigration work record",
      "should get social security work record",
      "should get assignees work records",
      "should get workrecords events",
      "should update tax work record milestone when moving forward",
      "should update immigration work record milestone when moving forward",
      "should update social work record milestone when moving forward",
      "should update tax work record milestone when moving backward",
      "should update immigration work record milestone when moving backward",
      "should update social work record milestone when moving backward",
      "should update manually briefing work record milestone when moving backward",
      "should return forbidden when moving online briefing work record forward if current mile stone is notify",
      "should return forbidden when moving milestone backward and current milestone is completed",
      "should update tax work record milestone when moving multiple milestones backward",
      "should return forbidden when milestone is standing still",
      "should return not found when work record does not exist",
      "should return forbidden when country not match work record",
      "should return forbidden when questionnaire is not submitted"
    ],
    "Children": []
  },
  {
    "$id": "110",
    "FileName": "EmployeeRelatedApiFacts.cs",
    "Description": "employee related api facts",
    "WhenList": [],
    "ThenList": [
      "should get count by assignee ids",
      "should get employee info by id"
    ],
    "Children": []
  },
  {
    "$id": "111",
    "FileName": "GetEmployeePopulationApiFacts.cs",
    "Description": "get employee population api facts",
    "WhenList": [],
    "ThenList": [
      "should get employee population"
    ],
    "Children": []
  },
  {
    "$id": "112",
    "FileName": "GetSocialSecurityStatusByEngagementsFact.cs",
    "Description": "get social security status by engagements fact",
    "WhenList": [],
    "ThenList": [
      "should get social security status by engagements"
    ],
    "Children": []
  },
  {
    "$id": "113",
    "FileName": "FileSharingFact.cs",
    "Description": "file sharing fact",
    "WhenList": [],
    "ThenList": [
      "should return staff by pwc guid",
      "should return engagement",
      "should return true when staff access engagement shared folder"
    ],
    "Children": []
  },
  {
    "$id": "114",
    "FileName": "GetPrimaryContactOfAssociatedEngagementsFacts.cs",
    "Description": "get primary contact of associated engagements facts",
    "WhenList": [],
    "ThenList": [
      "should get primary contact of nancy associated engagements"
    ],
    "Children": []
  },
  {
    "$id": "115",
    "FileName": "GetStaffByEmployeeId.cs",
    "Description": "get staff by employee id",
    "WhenList": [],
    "ThenList": [
      "should get staff by employee id"
    ],
    "Children": []
  },
  {
    "$id": "116",
    "FileName": "AuthorizationListFacts.cs",
    "Description": "authorization list facts",
    "WhenList": [],
    "ThenList": [
      "should verify contract with authorization list tile"
    ],
    "Children": []
  },
  {
    "$id": "117",
    "FileName": "BriefingStatusFacts.cs",
    "Description": "briefing status facts",
    "WhenList": [],
    "ThenList": [
      "should verify contract with briefing status tile"
    ],
    "Children": []
  },
  {
    "$id": "118",
    "FileName": "CertificateOfCoverageFacts.cs",
    "Description": "certificate of coverage facts",
    "WhenList": [],
    "ThenList": [
      "should return all summaries"
    ],
    "Children": []
  },
  {
    "$id": "119",
    "FileName": "EmployeeListFacts.cs",
    "Description": "employee list facts",
    "WhenList": [],
    "ThenList": [
      "should get employee overviews"
    ],
    "Children": []
  },
  {
    "$id": "120",
    "FileName": "EmployerReturnFacts.cs",
    "Description": "employer return facts",
    "WhenList": [],
    "ThenList": [
      "should verify employer return list consumered by apps"
    ],
    "Children": []
  },
  {
    "$id": "121",
    "FileName": "ImmigrationServicesFacts.cs",
    "Description": "immigration services facts",
    "WhenList": [],
    "ThenList": [
      "should get immigration work records"
    ],
    "Children": []
  },
  {
    "$id": "122",
    "FileName": "ImmigrationTrackingFacts.cs",
    "Description": "immigration tracking facts",
    "WhenList": [],
    "ThenList": [
      "should verify contract with immigration tracking tile"
    ],
    "Children": []
  },
  {
    "$id": "123",
    "FileName": "MissingInfoFacts.cs",
    "Description": "missing info facts",
    "WhenList": [],
    "ThenList": [
      "should verify the pact with my mobility apps"
    ],
    "Children": []
  },
  {
    "$id": "124",
    "FileName": "MyPopulationFacts.cs",
    "Description": "my population facts",
    "WhenList": [],
    "ThenList": [
      "should verify the pact with my mobility apps"
    ],
    "Children": []
  },
  {
    "$id": "125",
    "FileName": "QuestionnaireStatusFacts.cs",
    "Description": "questionnaire status facts",
    "WhenList": [],
    "ThenList": [
      "should verify contract with questionnaire status tile"
    ],
    "Children": []
  },
  {
    "$id": "126",
    "FileName": "ServiceEvaluationFacts.cs",
    "Description": "service evaluation facts",
    "WhenList": [],
    "ThenList": [
      "should match contract with service evaluation tile in mymobility"
    ],
    "Children": []
  },
  {
    "$id": "127",
    "FileName": "ServiceInitiationFacts.cs",
    "Description": "service initiation facts",
    "WhenList": [],
    "ThenList": [
      "should return engagement name by custom fields id"
    ],
    "Children": []
  },
  {
    "$id": "128",
    "FileName": "TaxEqualizationFacts.cs",
    "Description": "tax equalization facts",
    "WhenList": [],
    "ThenList": [
      "should get tax equalizations"
    ],
    "Children": []
  },
  {
    "$id": "129",
    "FileName": "TaxReturnFacts.cs",
    "Description": "tax return facts",
    "WhenList": [],
    "ThenList": [
      "should verify contract with tax return tile"
    ],
    "Children": []
  },
  {
    "$id": "130",
    "FileName": "TeqSettlementFacts.cs",
    "Description": "teq settlement facts",
    "WhenList": [],
    "ThenList": [
      "should match contract with teq settlement tile in mymobility",
      "should match contract with teq settlement tile email in mymobility"
    ],
    "Children": []
  },
  {
    "$id": "131",
    "FileName": "GetEngagementUniqueNameFacts.cs",
    "Description": "get engagement unique name facts",
    "WhenList": [],
    "ThenList": [
      "should get client short name and engagement name as engagement unique name"
    ],
    "Children": []
  },
  {
    "$id": "132",
    "FileName": "TaxReturnWorkRecordFact.cs",
    "Description": "tax return work record fact",
    "WhenList": [],
    "ThenList": [
      "should have empty irmark from tax return work record when no irmark is signing",
      "should have irmark from tax return work record when irmark is signing",
      "should update irmark from tax return work record when irmark is changed",
      "should claim true for is efiling with efile group",
      "should claim false for is efiling without efile group",
      "should claim true for default is efile consent on",
      "should claim false for is efile consent on"
    ],
    "Children": []
  },
  {
    "$id": "133",
    "FileName": "StaffHandoverRequestValidatorFacts.cs",
    "Description": "staff handover request validator facts",
    "WhenList": [],
    "ThenList": [
      "should return invalid when both team id engagement id are zero",
      "should return invalid when both team id engagement id are non zero",
      "should return invalid when assign to is zero",
      "should return valid when team id is not zero",
      "should return valid when engagement id is not zero"
    ],
    "Children": []
  },
  {
    "$id": "134",
    "FileName": "DateJsonConverterFacts.cs",
    "Description": "date json converter facts",
    "WhenList": [],
    "ThenList": [
      "should convert datetime to string",
      "should convert string to datetime",
      "should convert empty string to null",
      "should convert empty string to min date"
    ],
    "Children": []
  },
  {
    "$id": "135",
    "FileName": "EnumerableExtensionFacts.cs",
    "Description": "enumerable extension facts",
    "WhenList": [],
    "ThenList": [
      "should return empty list if source is empty",
      "split should keep all elements",
      "split the count of last collection is the mod"
    ],
    "Children": []
  },
  {
    "$id": "136",
    "FileName": "OptionalFieldJsonConverterFacts.cs",
    "Description": "optional field json converter facts",
    "WhenList": [],
    "ThenList": [
      "should convert when properties in json",
      "should convert and hasvalue is false when properties not in json",
      "should serialize as original value"
    ],
    "Children": [
      {
        "$id": "137",
        "FileName": "OptionalFieldJsonConverterFacts.cs",
        "Description": "class 1",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "138",
    "FileName": "QueryableExtensionsFacts.cs",
    "Description": "queryable extensions facts",
    "WhenList": [],
    "ThenList": [
      "should throw exception when properties of source element with different type",
      "should self union in memory"
    ],
    "Children": []
  },
  {
    "$id": "139",
    "FileName": "StatisticsUtilFacts.cs",
    "Description": "statistics util facts",
    "WhenList": [],
    "ThenList": [
      "should trucate tail",
      "should handle zero count"
    ],
    "Children": []
  },
  {
    "$id": "140",
    "FileName": "AssingeeInfoAccessManagerFacts.cs",
    "Description": "assingee info access manager facts",
    "WhenList": [],
    "ThenList": [
      "should can not view PII if staff not self nominate",
      "should can view PII after self nomination"
    ],
    "Children": []
  },
  {
    "$id": "141",
    "FileName": "FileCabinetFacts.cs",
    "Description": "file cabinet facts",
    "WhenList": [],
    "ThenList": [
      "should return assignee PII for consent"
    ],
    "Children": []
  },
  {
    "$id": "142",
    "FileName": "AuthorizationListManageControlFacts.cs",
    "Description": "authorization list manage control facts",
    "WhenList": [],
    "ThenList": [
      "should can manage authorization list when login with coordinating primary contact",
      "should can manage authorization list when login with coordinating secondry contact",
      "should can manage authorization list when login with delegated primary contact",
      "should can manage authorization list when login with delegated secondary contact",
      "should can not manage authorization list when login with subscribe office contact"
    ],
    "Children": []
  },
  {
    "$id": "143",
    "FileName": "AuthorizationListUpdateControlFacts.cs",
    "Description": "authorization list update control facts",
    "WhenList": [],
    "ThenList": [
      "should can update authorization list when login with coordinating primary contact",
      "should can update authorization list when login with coordinating secondry contact",
      "should can update authorization list when login with delegated primary contact",
      "should can update authorization list when login with delegated secondary contact",
      "should can not update authorization list when login with user not in work offices"
    ],
    "Children": []
  },
  {
    "$id": "144",
    "FileName": "AccountSynchronizerFacts.cs",
    "Description": "account synchronizer facts",
    "WhenList": [],
    "ThenList": [
      "should sync assignee account to tiger",
      "should sync account if contact is not belongs subscribed offices"
    ],
    "Children": []
  },
  {
    "$id": "145",
    "FileName": "AccountSyncProviderFacts.cs",
    "Description": "account sync provider facts",
    "WhenList": [],
    "ThenList": [
      "should get account sync when status is false",
      "should get null when status is false and last modified at less than interval",
      "should get null when status is true",
      "should get null when status is false and update by another process",
      "should get account sync when status is true and less than ten times interval"
    ],
    "Children": []
  },
  {
    "$id": "146",
    "FileName": "AssigneeUpdaterFacts.cs",
    "Description": "assignee updater facts",
    "WhenList": [],
    "ThenList": [
      "should merge account info to assignee"
    ],
    "Children": []
  },
  {
    "$id": "147",
    "FileName": "EntityTimestampWatcherFacts.cs",
    "Description": "entity timestamp watcher facts",
    "WhenList": [],
    "ThenList": [
      "should invalidate cache when updated"
    ],
    "Children": []
  },
  {
    "$id": "148",
    "FileName": "FeedLoaderFacts.cs",
    "Description": "feed loader facts",
    "WhenList": [],
    "ThenList": [
      "should get modified user ids"
    ],
    "Children": []
  },
  {
    "$id": "149",
    "FileName": "AppointmentAttachmentFacts.cs",
    "Description": "appointment attachment facts",
    "WhenList": [],
    "ThenList": [
      "should upload i calendar attachment to notification send to assignee",
      "should upload i calendar attachment with correct scheduled date period",
      "should upload i calendar attachment with correct description",
      "should generate icalendar event description with i 18 support",
      "should generate icalendar event description with other method and i 18 support",
      "should generate icalendar event description with pwc office address and i 18 support",
      "should generate icalendar event description with assignee office address and i 18 support",
      "should upload i calendar attachment with correct from",
      "should upload cancel i calendar attachment to notification service",
      "should upload i calendar attachment to notification send to staff",
      "should upload i calendar attachment to notification send to staff and sanitize filename when assignee name contains special chars",
      "should upload i calendar attachment with correct scheduled date period when send email to staff",
      "should upload i calendar attachment with correct description when send email to staff",
      "should generate icalendar event description with other method when send email to staff",
      "should generate icalendar event description with pwc office address when send email to staff",
      "should generate icalendar event description with assignee office address when send email to staff"
    ],
    "Children": []
  },
  {
    "$id": "150",
    "FileName": "BriefingWorkRecordReminderToAssigneeFacts.cs",
    "Description": "briefing work record reminder to assignee facts",
    "WhenList": [],
    "ThenList": [
      "should send reminder email when appointment date is two days after",
      "should send with correct method info in reminder email when method is other",
      "should send with correct other method detail info in reminder email when method is other",
      "should send with link if other method detail contains link",
      "should send more info via next email prompt if other briefing method detail is empty",
      "should not send address parameter if briefing method is not address related",
      "should send other briefing method details with line break",
      "should send reminder email when assignee not register",
      "should send reminder email given team mailbox"
    ],
    "Children": []
  },
  {
    "$id": "151",
    "FileName": "BriefingWorkRecordRescheduleNotificationToStaffFacts.cs",
    "Description": "briefing work record reschedule notification to staff facts",
    "WhenList": [],
    "ThenList": [
      "when rescheduled by normal staff and engagement has team mailbox it should staff email normal staff and team",
      "when rescheduled by normal staff and engagement has team mailbox it should email staff different briefing addresses according to request",
      "it should email staff with other briefing method name",
      "it should email staff with current other briefing method details",
      "when rescheduled with other briefing method and detail has url it should send with link",
      "when briefing method is changed to non other it should not send current briefing method details",
      "when briefing method is changed to other from non other it shoud not send previous briefing method details",
      "it should email staff with previous other briefing method details",
      "it should email staff with previous other briefing method with link if detail contains url",
      "it should not email with previous other briefing method details if previous method is non other",
      "it should not send address parameters if briefing method is not address related",
      "it should send via other email prompt if other briefing method detail is empty",
      "when rescheduled by assignee it should email briefing coordinator",
      "when rescheduled by office staff and engagement has team mailbox it should send email by office staff",
      "when rescheduled by assignee and engagement has team mailbox it should email correct info to team by assignee",
      "when rescheduled by sophia it should email sophia and briefing coordinator",
      "when rescheduled and both previous and current method are other it should email staff both other method details with line break"
    ],
    "Children": []
  },
  {
    "$id": "152",
    "FileName": "BriefingWorkRecordScheduledConfirmationToAssigneeFacts.cs",
    "Description": "briefing work record scheduled confirmation to assignee facts",
    "WhenList": [],
    "ThenList": [
      "when scheduled by normal staff it should email assignee correct basic info",
      "when scheduled by assignee it should email assignee correct basic info",
      "when scheduled by office staff and engagement has team mailbox it should email assignee by team",
      "when scheduled by assignee and engagement has team mailbox it should email assignee by noreply",
      "when scheduled by sofia it should email assignee by sofia",
      "when scheduled by staff it should email assignee different briefing addresses according to request",
      "when scheduled by assignee it should email assignee different briefing addresses according to request",
      "when scheduled by assignee it should email assignee different briefing methods according to request",
      "when scheduled by staff it should email assignee different briefing methods according to request",
      "when scheduled by staff and assignee it should email assignee for WR which uses other briefing method by rich 18 parameters",
      "when scheduled by staff or assignee and WR uses other briefing method it should email assignee with correct other method details",
      "when scheduled with other briefing method and detail contains URL it should email assignee with link",
      "when scheduled with other briefing method but detail is empty it should email assignee with more info via next email prompt",
      "when scheduled with non address related method it should not send address parameter",
      "when scheduled with other briefing method it should send assignee other method details with line breaks"
    ],
    "Children": []
  },
  {
    "$id": "153",
    "FileName": "BriefingWorkRecordScheduledNotificationToStaffFacts.cs",
    "Description": "briefing work record scheduled notification to staff facts",
    "WhenList": [],
    "ThenList": [
      "when scheduled by normal staff and engagement has team mailbox it should email to normal staff and team",
      "when scheduled by normal staff it should email staff with different briefing addresses and methods according to request",
      "when scheduled briefing method is non other it should not send with briefing method details parameter",
      "when scheduled with other briefing method and detail contains url it should send with link",
      "when scheduled with non address related method it should not send address parameter",
      "should email staff with other briefing method",
      "should email staff with other briefing method details",
      "it should email more info prompt when other briefing detail is empty",
      "when scheduled by assignee it should email staff with different briefing addresses and method according to request",
      "when scheduled by assignee and engagement has team mailbox it should email team",
      "when scheduled as other briefing method it should email staff other briefing details with line break"
    ],
    "Children": []
  },
  {
    "$id": "154",
    "FileName": "ApplyToWorkRecordFacts.cs",
    "Description": "apply to work record facts",
    "WhenList": [],
    "ThenList": [
      "should get patch custom field link for immi work record",
      "should get patch custom field link for ss work record"
    ],
    "Children": []
  },
  {
    "$id": "155",
    "FileName": "CountryCustomFieldValidatorFacts.cs",
    "Description": "country custom field validator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid",
      "should return error when custom field name is empty",
      "should return error when name is longer than 255 characters",
      "should return error when create by is null",
      "should return error when name is not unique with same country and location",
      "should be invalid when practice type is empty",
      "should be invalid when list type custom field has not contents",
      "should be invalid when list type custom field list content length exceed 50",
      "should be invalid when list type custom field list content length is 0",
      "should be invalid when list type contents duplicated"
    ],
    "Children": []
  },
  {
    "$id": "156",
    "FileName": "CustomFieldsValueValidatorFacts.cs",
    "Description": "custom fields value validator facts",
    "WhenList": [],
    "ThenList": [
      "should valid when custom field type is number and value is null",
      "should valid when custom field type is number and the value is valid",
      "should return error when custom field type is number but the value exceed the range or not number",
      "should fail validation when custom field value value length more than 255",
      "should pass validation when length is less than 255",
      "should success validation when custom field value value null",
      "should be invalid when custom field value is longer than 255 characters",
      "should be invalid when list type custom field value is not exist"
    ],
    "Children": []
  },
  {
    "$id": "157",
    "FileName": "EngagementCustomFieldValidatorFacts.cs",
    "Description": "engagement custom field validator facts",
    "WhenList": [],
    "ThenList": [
      "should success for validate correct cf",
      "should return error when custom field name is empty",
      "should return error when name is longer than 255 characters",
      "should return error when engagement is null",
      "should return error when create by is null",
      "should return error when name is not unique with same engagement and location",
      "should return error when name is not unique with same engagement and location type",
      "should invalid for validate correct when custom field with same name and same id",
      "should be invalid when custom field with same name location and engagement",
      "should be invalid when list type custom field has not contents",
      "should be invalid when list type custom field list content length exceed 50",
      "should be invalid when list type custom field list content length is 0",
      "should be invalid when list type contents duplicated",
      "should be invalid when segmentation more than limit",
      "should be valid when segmentation less than limit",
      "should be valid when publish to mymobility and engagement custom field is open and displayed on assignee",
      "should be invalid when published to mymobility and engagement custom field is restricted",
      "should be invalid when published to mymobility and engagement custom field is displayed on workrecord"
    ],
    "Children": []
  },
  {
    "$id": "158",
    "FileName": "WorkRecordCustomFieldValueUpdateRequestFacts.cs",
    "Description": "work record custom field value update request facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when work record not existed",
      "should be invalid when the work record does not have the custom field",
      "should be invalid when custom field type is date with invalid date"
    ],
    "Children": []
  },
  {
    "$id": "159",
    "FileName": "ImmigrationWorkRecordResourceLinkFacts.cs",
    "Description": "immigration work record resource link facts",
    "WhenList": [],
    "ThenList": [
      "should include start questionnaire link for notified immigration work record",
      "should include activate link for created immigartion work record",
      "should include submit link for in process work record"
    ],
    "Children": []
  },
  {
    "$id": "160",
    "FileName": "NumberFormatterFacts.cs",
    "Description": "number formatter facts",
    "WhenList": [],
    "ThenList": [
      "should test number convert"
    ],
    "Children": []
  },
  {
    "$id": "161",
    "FileName": "TaxWorkRecordResourceLinkFacts.cs",
    "Description": "tax work record resource link facts",
    "WhenList": [],
    "ThenList": [
      "should include ACTIVATION link when work record is tax return and current status is RECORD CREATED",
      "should include DECIDE link when work record is CPQ tax return and current status is IN PROCESS",
      "should not include DECIDE link when work record is NOT CPQ tax return",
      "should not include DECIDE link when work record is NOT IN PROCESS",
      "should not include ACTIVATION link for activated tax return work record",
      "should include restart link for move to in process"
    ],
    "Children": []
  },
  {
    "$id": "162",
    "FileName": "EngagementAclFacts.cs",
    "Description": "engagement acl facts",
    "WhenList": [],
    "ThenList": [
      "should can access engagement given staff is null for query",
      "should can access engagement given staff is null",
      "should not access engagement given staff is not in acl for query",
      "should not access engagement given staff is not in acl",
      "should can access engagement given engagement is not restricted for query",
      "should can access engagement given engagement is not restricted",
      "should can access engagement given staff is global admin for query",
      "should can access engagement given staff is global admin",
      "should can access engagement given staff is in acl for query",
      "should can access engagement given staff is in acl",
      "should can access engagement given staff is engagement admin for query",
      "should can access engagement given staff is engagement admin",
      "should can access engagement given staff is primary contact for query",
      "should can access engagement given staff is primary contact",
      "should can access engagement given staff is secondary contact for query",
      "should can access engagement given staff is secondary contact",
      "should can access engagement given staff is primary contact in delegated coordinating office for query",
      "should can access engagement given staff is primary contact in delegated coordinating office",
      "should can access engagement given staff is secondry contact in delegated coordinating office for query",
      "should can access engagement given staff is secondry contact in delegated coordinating office",
      "should can access engagement given staff is primary contact in working office for query",
      "should can access engagement given staff is primary contact in working office",
      "should can access engagement given staff is secondry contact in working office for query",
      "should can access engagement given staff is secondry contact in working office"
    ],
    "Children": []
  },
  {
    "$id": "163",
    "FileName": "QueryableAssigneeAclFacts.cs",
    "Description": "queryable assignee acl facts",
    "WhenList": [],
    "ThenList": [
      "should can view assignee info given staff is null",
      "should can view queryable assignee info given staff is null",
      "should can view assignee info given staff is global admin",
      "should can view queryable assignee info given staff is global admin",
      "should can view assignee info given assignee is not restricted",
      "should can view queryable assignee info given assignee is not restricted",
      "should can view assignee info given staff is contact",
      "should can view queryable assignee info given staff is contact",
      "should not can view assignee info given staff not in acl",
      "should not can view queryable assignee info given staff not in acl",
      "should can view assignee info given staff in acl",
      "should can view queryable assignee info given staff in acl",
      "should not can view assignee info given all engagement is restricted",
      "should not can view queryable assignee info given all engagement is restricted",
      "should can view assignee info given have at least one engagement is not restricted",
      "should can view queryable assignee info given have at least one engagement is not restricted",
      "should can view assignee info given staff is in engagement acl by second contact",
      "should can view queryable assignee info given staff is in engagement acl by second contact",
      "should can view assignee info given staff is in engagement acl by delegated coordinating office second contact",
      "should can view queryable assignee info given staff is in engagement acl by delegated coordinating office second contact"
    ],
    "Children": []
  },
  {
    "$id": "164",
    "FileName": "GetClientAssociationByDateFacts.cs",
    "Description": "get client association by date facts",
    "WhenList": [],
    "ThenList": [
      "should get client association when assignee has only one client",
      "should get first client association when assignee has multiple clients and given date belongs to first client",
      "should get last client association when assignee has multiple clients and given date belongs to last client",
      "should get middle client association when assignee has multiple clients and given date belongs to one client in the middle"
    ],
    "Children": []
  },
  {
    "$id": "165",
    "FileName": "when_Assignee_exist.cs",
    "Description": "assignee facts",
    "WhenList": [],
    "ThenList": [
      "should assignee exist"
    ],
    "Children": []
  },
  {
    "$id": "166",
    "FileName": "AssignmentClientMatchServiceFacts.cs",
    "Description": "assignment client match service facts",
    "WhenList": [],
    "ThenList": [
      "should be matchable if assignment has no start date",
      "should be matchable if start date of assignment fall within the client association effective date"
    ],
    "Children": []
  },
  {
    "$id": "167",
    "FileName": "CreateAuthorizationItemByAuthorizationRuleAllYearsFacts.cs",
    "Description": "create authorization item by authorization rule all years facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item when authorization rule for is all years and assignment date overlaps with tax year",
      "should not create authorization item when authorization rule for is all years and assignment date does not overlap with tax year",
      "should create authorization item when authorization rule for is all years and assignment start date is null and end date is after the beginning of tax year",
      "should not create authorization item when authorization rule for is all years and assignment start date is null and end date is before the beginning of tax year",
      "should create authorization item when authorization rule for is all years and assignment end date is null and start date is before the end of tax year",
      "should not create authorization item when authorization rule for is all years and assignment end date is null and start date is after the end of tax year",
      "should create authorization item when authorization rule for is all years and assignment start and end date is null"
    ],
    "Children": []
  },
  {
    "$id": "168",
    "FileName": "CreateAuthorizationItemByAuthorizationRuleAllYearsPlusOneFacts.cs",
    "Description": "create authorization item by authorization rule all years plus one facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item when authorization rule for is all years plus one and assignment date extending one year overlaps with tax year",
      "should create authorization item when authorization rule for is all years plus one and assignment date extending one year does not overlap with tax year",
      "should create authorization item when authorization rule for is all years plus one and assignment start date is null and end date plus one year is after the beginning of tax year",
      "should not create authorization item when authorization rule for is all years plus one and assignment start date is null and end date plus one year is before the beginning of tax year",
      "should create authorization item when authorization rule for is all years and assignment end date is null and start date is before the end of tax year",
      "should not create authorization item when authorization rule for is all years and assignment end date is null and start date is after the end of tax year"
    ],
    "Children": []
  },
  {
    "$id": "169",
    "FileName": "CreateAuthorizationItemByAuthorizationRuleFirstThreeYearsFacts.cs",
    "Description": "create authorization item by authorization rule first three years facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item only for the first three years when assignment lasts more than 2 years",
      "should create authorization item only for the first year when assignment does not cross year",
      "should create authorization item only for the first 2 years when assignment only cross 2 years",
      "should create authorization item when authorization rule for is first two years only and assignment start date is null and end date is after the beginning of tax year",
      "should create authorization item when authorization rule for is first two years only and assignment start date and end date is null"
    ],
    "Children": []
  },
  {
    "$id": "170",
    "FileName": "CreateAuthorizationItemByAuthorizationRuleFirstTwoYearsFacts.cs",
    "Description": "create authorization item by authorization rule first two years facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item only for the first two years when assignment lasts more than 2 years",
      "should create authorization item only for the first year when assignment does not cross year",
      "should create authorization item when authorization rule for is first two years only and assignment start date is null and end date is after the beginning of tax year",
      "should create authorization item when authorization rule for is first two years only and assignment start date and end date is null",
      "should create authorization item when assignment only have one date"
    ],
    "Children": []
  },
  {
    "$id": "171",
    "FileName": "CreateAuthorizationItemByAuthorizationRuleFirstYearFacts.cs",
    "Description": "create authorization item by authorization rule first year facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item when authorization rule for is first year only and assignment start date is in tax year",
      "should not create authorization item when authorization rule for is first year only and assignment start date is not in tax year",
      "should create authorization item when authorization rule for is first year only and assignment start date is null and end date is after the beginning of tax year",
      "should not create authorization item when authorization rule for is first year only and assignment start date is null and end date is before the beginning of tax year",
      "should create authorization item when authorization rule for is first year only and assignment start date and end date is null"
    ],
    "Children": []
  },
  {
    "$id": "172",
    "FileName": "CreateAuthorizationItemByAuthorizationRuleFirstYearFactsAndLastYear.cs",
    "Description": "create authorization item by authorization rule first year and last year facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item for host country when assignment start date is in tax year",
      "should create authorization item for host country when assignment end date is in tax year",
      "should not create authorization item for host country when assignment start and end date is not in tax year",
      "should create authorization item for host country when assignment end date is null and start date is before the end of tax year",
      "should create authorization item for host country when assignment start and end date is null",
      "should create authorization item when assignment start date is null",
      "should not create authorization item after end date when assignment start date is null",
      "should not create authorization item in next following years when assignment has no end date"
    ],
    "Children": []
  },
  {
    "$id": "173",
    "FileName": "CreateAuthorizationItemByAuthorizationRuleMiscFacts.cs",
    "Description": "create authorization item by authorization rule misc facts",
    "WhenList": [],
    "ThenList": [
      "should create specified authorization item when engagement authorization rule is first year only for home and all years plus one for host",
      "should create specified authorization item when engagement authorization rule is all years for home and first year and last year for host"
    ],
    "Children": []
  },
  {
    "$id": "174",
    "FileName": "CreateAuthorizationItemByAuthorizationRuleNoneFacts.cs",
    "Description": "create authorization item by authorization rule none facts",
    "WhenList": [],
    "ThenList": [
      "should not create authorization item when engagement authorization rule is none",
      "should not create authorization item when engagement authorization rule is none and assignment date is null"
    ],
    "Children": []
  },
  {
    "$id": "175",
    "FileName": "CreateAuthorizationItemForFiscalYearCountriesByAuthorizationRuleFacts.cs",
    "Description": "create authorization item for fiscal year countries by authorization rule facts",
    "WhenList": [],
    "ThenList": [
      "should create both home and host authorization items when apply authorization rule first year only for fiscal year countries",
      "should create only home authorization item when apply authorization rule first year only for fiscal year countries",
      "should create only host authorization item when apply authorization rule first year only for fiscal year countries",
      "should not create both home and host authorization items when apply authorization rule first year only for fiscal year countries"
    ],
    "Children": []
  },
  {
    "$id": "176",
    "FileName": "CreateAuthorizationItemByMultipleClientsRuleFacts.cs",
    "Description": "create authorization item by multiple clients rule facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item and determine client by assignment start date and client effective date",
      "should create authorization item for any client if assignment does not have start date"
    ],
    "Children": []
  },
  {
    "$id": "177",
    "FileName": "CreateAuthorizationItemByMultipleEngagementsRuleFacts.cs",
    "Description": "create authorization item by multiple engagements rule facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item by assignment that assignment could match engagement",
      "should create authorization item by assignment without assignment type"
    ],
    "Children": []
  },
  {
    "$id": "178",
    "FileName": "CreateAuthorizationItemByTimeRuleFacts.cs",
    "Description": "create authorization item by time rule facts",
    "WhenList": [],
    "ThenList": [
      "should create host authorization item when assignment has no start and end date",
      "should create host authorization item when assignment has no start date and end date is after first day of year",
      "should not create host authorization item by all year plus one rule when assignment has no start date but end date is before first day of previous year",
      "should create host authorization item when assignment has no end date and start date is before last day of year",
      "should not create host authorization item when assignment has no end date but start date is after last day of year",
      "should create host authorization item when assignment has both dates and start date is before last day of year and end date is after first day of year",
      "should not create host authorization item when assignment has both dates and start date is after last day of year",
      "should not create host authorization item by all year plus one rule when assignment has both dates and end date is before first day of previous year",
      "should create host authorization item by all year plus one rule when assignment has no start date and end date is after first day of previous year",
      "should create host authorization item by all year plus one rule when assignment has both dates and start date is before last day of previous year and end date is after first day of previous year",
      "should create host authorization item when assignment in the fiscal year",
      "should create home authorization item when assignment in the fiscal year"
    ],
    "Children": []
  },
  {
    "$id": "179",
    "FileName": "CreateAuthorizationItemFromInvalidAssigneeFacts.cs",
    "Description": "create authorization item from invalid assignee facts",
    "WhenList": [],
    "ThenList": [
      "should not create authorization item when assignee is invalid"
    ],
    "Children": []
  },
  {
    "$id": "180",
    "FileName": "CreateAuthorizationItemWithCorrectEmployeeIdFacts.cs",
    "Description": "create authorization item with correct employee id facts",
    "WhenList": [],
    "ThenList": [
      "should create authorization item when assignment has assignment type",
      "should create authorization item and determine employee id by client when assignment does not have assignment type"
    ],
    "Children": []
  },
  {
    "$id": "181",
    "FileName": "CreateHomeAuthorizationItemFacts.cs",
    "Description": "create home authorization item facts",
    "WhenList": [],
    "ThenList": [
      "should create only one home authorization item when assignee has multiple assignment for this year",
      "should not create home authorization item when assignee has no assignement for this year"
    ],
    "Children": []
  },
  {
    "$id": "182",
    "FileName": "GenericCacheFacts.cs",
    "Description": "generic cache facts",
    "WhenList": [],
    "ThenList": [
      "should load once",
      "should invalidate cache"
    ],
    "Children": []
  },
  {
    "$id": "183",
    "FileName": "CanEditEngagementKpiSettingsFacts.cs",
    "Description": "can edit engagement kpi settings facts",
    "WhenList": [],
    "ThenList": [
      "engagement admin can edit engagement kpi settings",
      "global admin can edit engagement kpi settings",
      "staff in coordinating office and as primary contact can edit engagement kpi settings",
      "staff in coordinating office and as secondary contact can edit engagement kpi settings",
      "staff not in coordinating office but as primary contact can edit engagement kpi settings",
      "staff not in coordinating office but as secondary contact can edit engagement kpi settings",
      "staff in delegated coordinating office as primary contact can edit engagement kpi settings",
      "staff in delegated coordinating office as secondary contact can edit engagement kpi settings",
      "staff in subscribed office as primary contact can not edit engagement kpi settings",
      "staff in subscribed office as secondary contact can not edit engagement kpi settings",
      "office engagement admin can not edit engagement kpi settings",
      "staff in coordinating office but not contact can not edit engagement kpi settings",
      "staff in delegated office but not contact can not edit engagement kpi settings",
      "staff in subscribed office but not contact can not edit engagement kpi settings",
      "staff on engagement acl but not contact can not edit engagement kpi settings",
      "staff not in any working office can not edit engagement kpi settings"
    ],
    "Children": []
  },
  {
    "$id": "184",
    "FileName": "CanEditEngagementTypeOfServiceExternalCurrencyFacts.cs",
    "Description": "can edit engagement type of service external currency facts",
    "WhenList": [],
    "ThenList": [
      "engagement admin can edit engagement external currency",
      "global admin can edit engagement external currency",
      "staff in coordinating office and as primary contact can edit engagement external currency",
      "staff in coordinating office and as secondary contact can edit engagement external currency",
      "staff not in coordinating office but as primary contact can edit engagement external currency",
      "staff not in coordinating office but as secondary contact can edit engagement external currency",
      "staff in delegated coordinating office as primary contact can edit engagement external currency",
      "staff in delegated coordinating office as secondary contact can edit engagement external currency",
      "staff in subscribed office as primary contact can not edit engagement type of service",
      "staff in subscribed office as secondary contact can edit not engagement type of service",
      "office engagement admin can not edit engagement external currency",
      "staff in coordinating office but not contact can not edit engagement type of service",
      "staff in delegated office but not contact can not edit engagement type of service",
      "staff in subscribed office but not contact can not edit engagement type of service",
      "staff on engagement acl but not contact can not edit engagement type of service",
      "staff not in any working office can not edit engagement type of service"
    ],
    "Children": []
  },
  {
    "$id": "185",
    "FileName": "CanEditEngagementTypeOfServiceFacts.cs",
    "Description": "can edit engagement type of service facts",
    "WhenList": [],
    "ThenList": [
      "engagement admin can edit engagement type of service",
      "global admin can edit engagement type of service",
      "staff in coordinating office and as primary contact can edit engagement type of service",
      "staff in coordinating office and as secondary contact can edit engagement type of service",
      "staff not in coordinating office but as primary contact can edit engagement type of service",
      "staff not in coordinating office but as secondary contact can edit engagement type of service",
      "staff in delegated coordinating office as primary contact can edit engagement type of service",
      "staff in delegated coordinating office as secondary contact can edit engagement type of service",
      "staff in subscribed office as primary contact can edit engagement type of service",
      "staff in subscribed office as secondary contact can edit engagement type of service",
      "office engagement admin can edit engagement type of service",
      "staff in coordinating office but not contact can not edit engagement type of service",
      "staff in delegated office but not contact can not edit engagement type of service",
      "staff in subscribed office but not contact can not edit engagement type of service",
      "staff on engagement acl but not contact can not edit engagement type of service",
      "staff not in any working office can not edit engagement type of service"
    ],
    "Children": []
  },
  {
    "$id": "186",
    "FileName": "CanViewEngagementInternalKpiFacts.cs",
    "Description": "can view engagement internal kpi facts",
    "WhenList": [],
    "ThenList": [
      "engagement admin can view engagement internal kpi",
      "global admin can view engagement internal kpi",
      "staff in coordinating office and as primary contact can view engagement internal kpi",
      "staff in coordinating office and as secondary contact can view engagement internal kpi",
      "staff not in coordinating office but as primary contact can view engagement internal kpi",
      "staff not in coordinating office but as secondary contact can view engagement internal kpi",
      "staff in delegated coordinating office as primary contact can view engagement internal kpi",
      "staff in delegated coordinating office as secondary contact can view engagement internal kpi",
      "staff in subscribed office as primary contact can not view engagement internal kpi",
      "staff in subscribed office as secondary contact can not view engagement internal kpi",
      "office engagement admin can not view engagement internal kpi",
      "staff in coordinating office but not contact can view engagement internal kpi",
      "staff in delegated office but not contact can view engagement internal kpi",
      "staff in subscribed office but not contact can not view engagement internal kpi",
      "staff on engagement acl in coordinate office but not contact can view engagement internal kpi",
      "staff on engagement acl in delegate coordinate office but not contact can view engagement internal kpi",
      "staff on engagement acl in subscribe office but not contact can not view engagement internal kpi",
      "staff not on engagement acl and not contact but in work office can not view engagement internal kpi",
      "staff not in any working office can not view engagement internal kpi"
    ],
    "Children": []
  },
  {
    "$id": "187",
    "FileName": "CanViewEngagementKpiFacts.cs",
    "Description": "can view engagement kpi facts",
    "WhenList": [],
    "ThenList": [
      "engagement admin can view engagement kpi",
      "global admin can view engagement kpi",
      "staff in coordinating office and as primary contact can view engagement kpi",
      "staff in coordinating office and as secondary contact can view engagement kpi",
      "staff not in coordinating office but as primary contact can view engagement kpi",
      "staff not in coordinating office but as secondary contact can view engagement kpi",
      "staff in delegated coordinating office as primary contact can view engagement kpi",
      "staff in delegated coordinating office as secondary contact can view engagement kpi",
      "staff in subscribed office as primary contact can view engagement kpi",
      "staff in subscribed office as secondary contact can view engagement kpi",
      "office engagement admin can view engagement kpi",
      "staff in coordinating office but not contact can view engagement kpi",
      "staff in delegated office but not contact can view engagement kpi",
      "staff in subscribed office but not contact can view engagement kpi",
      "staff on engagement acl but not contact can view engagement kpi",
      "staff not on engagement acl and not contact but in work office can not view engagement kpi",
      "staff not in any working office can not view engagement kpi"
    ],
    "Children": []
  },
  {
    "$id": "188",
    "FileName": "CanViewEngagementTypeOfServiceFacts.cs",
    "Description": "can view engagement type of service facts",
    "WhenList": [],
    "ThenList": [
      "engagement admin can view engagement type of service",
      "global admin can view engagement type of service",
      "staff in coordinating office and as primary contact can view engagement type of service",
      "staff in coordinating office and as secondary contact can view engagement type of service",
      "staff not in coordinating office but as primary contact can view engagement type of service",
      "staff not in coordinating office but as secondary contact can view engagement type of service",
      "staff in delegated coordinating office as primary contact can view engagement type of service",
      "staff in delegated coordinating office as secondary contact can view engagement type of service",
      "staff in subscribed office as primary contact can view engagement type of service",
      "staff in subscribed office as secondary contact can view engagement type of service",
      "office engagement admin can view engagement type of service",
      "staff in coordinating office but not contact can view engagement type of service",
      "staff in delegated office but not contact can view engagement type of service",
      "staff in subscribed office but not contact can view engagement type of service",
      "staff on engagement acl but not contact can view engagement type of service",
      "staff not in any working office can not view engagement type of service",
      "staff in any working office but not in acl can not view engagement type of service"
    ],
    "Children": []
  },
  {
    "$id": "189",
    "FileName": "EngagementTypeOfServiceAccessManagerFacts.cs",
    "Description": "engagement type of service access manager facts",
    "WhenList": [],
    "ThenList": [
      "staff in subscribed offices can only view the services for their associated country",
      "staff in coordinating office can view all type of services",
      "staff in suscribed office but is primary contact can view all type of services",
      "staff in suscribed office but is secondary contact can view all type of services",
      "staff as engagement admin can view all type of services",
      "staff in subscribed office and as global admin can view all type of services",
      "staff in subscribed offices can only access associated country",
      "staff in coordinating office can access all countries",
      "staff in suscribed office but is primary contact can access all countries",
      "staff in suscribed office but is secondary contact can access all countries",
      "staff as engagement admin can access all country"
    ],
    "Children": []
  },
  {
    "$id": "190",
    "FileName": "EngagementValidatorFacts.cs",
    "Description": "engagement validator facts",
    "WhenList": [],
    "ThenList": [
      "should return error when invalid engagement admin practice type",
      "should return error when invalid coordinating office primary contact practice type",
      "should return error when invalid coordinating office secondary contact practice type",
      "should return error when invalid delegated office contact practice type",
      "should return error when invalid subscribed office contact practice type",
      "should return error when contact is different from delegated office",
      "should return error when contact is different from subscribed office",
      "should return error when engagement admin is same as the other admin",
      "should return error when coordinating office contact is same as the other contact",
      "should return error when delegated office contact is same as the other contact",
      "should return error when subscribed office contact is same as the other contact"
    ],
    "Children": []
  },
  {
    "$id": "191",
    "FileName": "EngagmentFacts.cs",
    "Description": "engagment facts",
    "WhenList": [],
    "ThenList": [
      "staff is office engagement admin"
    ],
    "Children": []
  },
  {
    "$id": "192",
    "FileName": "EntityCacheObserverFacts.cs",
    "Description": "entity cache observer facts",
    "WhenList": [],
    "ThenList": [
      "should update last modified at when office be changed",
      "should update last modified at when type of sercie be changed",
      "should update last modified at when engagement be changed"
    ],
    "Children": []
  },
  {
    "$id": "193",
    "FileName": "EngagementTypeOfServiceAccessManagerFacts.cs",
    "Description": "master chart of service access manager facts",
    "WhenList": [],
    "ThenList": [
      "global admin can view master chart of service",
      "country level role can view master chart of service",
      "office level role can not view master chart of service",
      "general staff can not view master chart of service"
    ],
    "Children": []
  },
  {
    "$id": "194",
    "FileName": "CountryRoleFacts.cs",
    "Description": "country role facts",
    "WhenList": [],
    "ThenList": [
      "should not edit role from different country",
      "should edit own profile",
      "should edit role from same country",
      "should change own access to general level or office level",
      "should change general role access to country level",
      "should not change own access to higher level",
      "should not edit general role access to global admin",
      "should not change global admin access level",
      "should change role level from same country"
    ],
    "Children": []
  },
  {
    "$id": "195",
    "FileName": "GeneralRoleFacts.cs",
    "Description": "general role facts",
    "WhenList": [],
    "ThenList": [
      "should edit own profile for general role",
      "should not edit own access for general",
      "should not edit other staff detail page for general role"
    ],
    "Children": []
  },
  {
    "$id": "196",
    "FileName": "GlobalAdminRoleFacts.cs",
    "Description": "global admin role facts",
    "WhenList": [],
    "ThenList": [
      "should edit role from different country",
      "should edit own profile",
      "should change own access to lower level",
      "should change general role access to higher level"
    ],
    "Children": []
  },
  {
    "$id": "197",
    "FileName": "OfficeRoleFacts.cs",
    "Description": "office role facts",
    "WhenList": [],
    "ThenList": [
      "should not edit role from different office",
      "should edit own profile",
      "should edit role from same office",
      "should change own access to general level",
      "should change general role access to office level",
      "should not change own access to higher level",
      "should not edit general role access to country level or global admin",
      "should not change global admin and country role access level"
    ],
    "Children": []
  },
  {
    "$id": "198",
    "FileName": "StaffProfileReviewFact.cs",
    "Description": "staff profile review fact",
    "WhenList": [],
    "ThenList": [
      "should return correct result"
    ],
    "Children": []
  },
  {
    "$id": "199",
    "FileName": "PasswordHashFacts.cs",
    "Description": "password hash facts",
    "WhenList": [],
    "ThenList": [
      "shold succeed when password provided is equal to origin plain text password",
      "shold be failed when password provided is more or less blank to origin plain text password",
      "shold be failed when password provided is not equal to origin plain text password",
      "shold be not equal for 2 encryption even same plain text password provided"
    ],
    "Children": []
  },
  {
    "$id": "200",
    "FileName": "MissingItemDatesFacts.cs",
    "Description": "missing item dates facts",
    "WhenList": [],
    "ThenList": [
      "should return when have one missing item date",
      "should return when start and end on same day",
      "should return when have multi missing item date",
      "should return when have multi same received at missing item",
      "should return when have multi same start at missing item",
      "should return when have multi and contains missing item date",
      "should return when have multi same start day missing item date with time"
    ],
    "Children": []
  },
  {
    "$id": "201",
    "FileName": "MissingItemDatesForCycleTimeFacts.cs",
    "Description": "missing item dates for cycle time facts",
    "WhenList": [],
    "ThenList": [
      "should return when have one missing item date for cycle time",
      "should return when start and end on same day for cycle time",
      "should return when have multi missing item date for cycle time",
      "should return when have multi same received at missing item for cycle time",
      "should return when have multi same start at missing item for cycle time",
      "should return when have multi and contains missing item date for cycle time",
      "should return when have multi same start day missing item date with time for cycle time"
    ],
    "Children": []
  },
  {
    "$id": "202",
    "FileName": "MissingItemSectionsFacts.cs",
    "Description": "missing item sections facts",
    "WhenList": [],
    "ThenList": [
      "should return 1 days if total duration is less than 24 hours",
      "should return 1 days given missing item starts before start time while is received after start time and before end time",
      "should return 1 days if missing item starts and received before start time",
      "should return 1 days if missing item starts after start time and received before end time"
    ],
    "Children": []
  },
  {
    "$id": "203",
    "FileName": "EngagedOfficeContactCollectionFacts.cs",
    "Description": "engaged office contact collection facts",
    "WhenList": [],
    "ThenList": [
      "should get email address list",
      "should throw exception if primary contact is null",
      "should get email address list only contains primary email when secondary contact not exist"
    ],
    "Children": []
  },
  {
    "$id": "204",
    "FileName": "HistoryItemFacts.cs",
    "Description": "history item facts",
    "WhenList": [],
    "ThenList": [
      "should not delete relation history of entity"
    ],
    "Children": []
  },
  {
    "$id": "205",
    "FileName": "MissingItemFacts.cs",
    "Description": "missing item facts",
    "WhenList": [],
    "ThenList": [
      "mark missing itmes date should earlier or equal than today",
      "mark missing itmes date should later or equal than date identifier"
    ],
    "Children": []
  },
  {
    "$id": "206",
    "FileName": "MissingItemToDtoFacts.cs",
    "Description": "missing item to dto facts",
    "WhenList": [],
    "ThenList": [
      "should return 1 for days outstanding when since is after now",
      "should return 1 for days outstanding when since is after received"
    ],
    "Children": []
  },
  {
    "$id": "207",
    "FileName": "QuestionnaireFilesCleanerFacts.cs",
    "Description": "questionnaire files cleaner facts",
    "WhenList": [],
    "ThenList": [
      "should delete prepare reports when milestone back to in process from submitted",
      "should delete prepare reports which generated by global questionnaire submission",
      "should delete prepare reports which generated by single submission",
      "should delete supporting document when milestone back to in process from submitted"
    ],
    "Children": []
  },
  {
    "$id": "208",
    "FileName": "QuestionnaireSubmissionServiceFacts.cs",
    "Description": "questionnaire submission service facts",
    "WhenList": [],
    "ThenList": [
      "should generate prepares report and upload supporting doc when consent is confirmed",
      "should use assignee orgaizer route in submittal job",
      "should not generate prepares report for tracking organizer",
      "should return exception when not confirmed to ignore",
      "should send additionnal notification to CA tax contact",
      "should send notification to tax contact when responsible office without team mailbox",
      "should send notification to questionnaire contact office team mailbox",
      "should not send notification for paper questionnaire",
      "should not send additional notification to CA tax contact when does not have ca work record"
    ],
    "Children": [
      {
        "$id": "209",
        "FileName": "QuestionnaireSubmissionServiceFacts.cs",
        "Description": "fake work record repository",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "210",
    "FileName": "WorkRecordExtensionsFacts.cs",
    "Description": "work record extensions facts",
    "WhenList": [],
    "ThenList": [
      "should get tiger web uri for a work record",
      "should assignment matched when workrecord country is same with assignee home country",
      "should assignment not matched when workrecord fiscal end date is ealier than assignment start date",
      "should assignment matched when there is overlap between workrecord fiscal date and assignment date",
      "should assignment matched when immigration workrecord and assignment country are same",
      "should assignment matched when workrecord star date is one year later than assignment end date",
      "should assignment not matched when workrecord star date is one year later than assignment expect end date"
    ],
    "Children": []
  },
  {
    "$id": "211",
    "FileName": "WorkRecordFacts.cs",
    "Description": "work record facts",
    "WhenList": [],
    "ThenList": [
      "should only filter unreceived missing item from assignee",
      "should return null when workrecord has no organizer",
      "should return null when workrecord not submitted",
      "should return empty when no missing items from assignee",
      "should get contacts from responsible office if responsible office is coordinating office",
      "should get contacts from responsible office if responsible office is working office",
      "should get contacts from responsible office if responsible office has no secondary contact",
      "should get contacts from engagement coordinating office",
      "should get year for work record"
    ],
    "Children": []
  },
  {
    "$id": "212",
    "FileName": "DeliveredMilestoneMovementConditionFacts.cs",
    "Description": "delivered milestone movement condition facts",
    "WhenList": [],
    "ThenList": [
      "should pass given it is NON UK work record",
      "should pass given IR mark NOT provided for UK work record",
      "should pass given IR mark provided for UK work record"
    ],
    "Children": []
  },
  {
    "$id": "213",
    "FileName": "FeatureToggleFacts.cs",
    "Description": "feature toggle facts",
    "WhenList": [],
    "ThenList": [
      "should get feature toggles"
    ],
    "Children": []
  },
  {
    "$id": "214",
    "FileName": "EngagementTypeOfServiceDtoFacts.cs",
    "Description": "engagement type of service dto facts",
    "WhenList": [],
    "ThenList": [
      "should convert engagement type of service dto to engagement type of service"
    ],
    "Children": []
  },
  {
    "$id": "215",
    "FileName": "OutOfScopeWorksExtensionFacts.cs",
    "Description": "out of scope works extension facts",
    "WhenList": [],
    "ThenList": [
      "should convert out of scope work to out of scope work dto"
    ],
    "Children": []
  },
  {
    "$id": "216",
    "FileName": "QueryableWorkRecordToDtoExtensionsFacts.cs",
    "Description": "queryable work record to dto extensions facts",
    "WhenList": [],
    "ThenList": [
      "should not get milestones info if media type not contains with status info",
      "should not get milestones info if media type contains with status info and value is false",
      "should get milestones info if media type contains with status info",
      "should get questionnaire due date in iso 8601 date time format",
      "should get service status",
      "should get is efile consent on field as false",
      "should get is efile consent on field as true",
      "should get create work record note link",
      "should get patch custom field link for tax work record",
      "should not get patch custom field link when engagement have not any custom fields",
      "should return immigration work record info"
    ],
    "Children": []
  },
  {
    "$id": "217",
    "FileName": "WorkRecordNoteToDtoExtensionsFacts.cs",
    "Description": "work record note to dto extensions facts",
    "WhenList": [],
    "ThenList": [
      "should convert work record note to dto when work record note has everything",
      "should convert work record note to dto when there is no account or create date"
    ],
    "Children": []
  },
  {
    "$id": "218",
    "FileName": "AssigneeEventsRepresentationFacts.cs",
    "Description": "assignee events representation facts",
    "WhenList": [],
    "ThenList": [
      "should return event modifier guid as stored employee id when employee id is not null",
      "should return event modifier guid as staff first employee id when employee id is null"
    ],
    "Children": []
  },
  {
    "$id": "219",
    "FileName": "EngagementEventsRepresentationFacts.cs",
    "Description": "staff events representation facts",
    "WhenList": [],
    "ThenList": [
      "should return event modifier guid as stored employee id when employee id is not null",
      "should return event modifier guid as staff first employee id when employee id is null"
    ],
    "Children": []
  },
  {
    "$id": "220",
    "FileName": "EngagementEventsRepresentationFacts.cs",
    "Description": "engagement events representation facts",
    "WhenList": [],
    "ThenList": [
      "should return event modifier guid as stored employee id when employee id is not null",
      "should return event modifier guid as staff first employee id when employee id is null"
    ],
    "Children": []
  },
  {
    "$id": "221",
    "FileName": "WorkRecordEventsRepresentationFacts.cs",
    "Description": "work record events representation facts",
    "WhenList": [],
    "ThenList": [
      "should return event modifier guid as stored employee id when employee id is not null",
      "should return event modifier guid as staff first employee id when employee id is null"
    ],
    "Children": []
  },
  {
    "$id": "222",
    "FileName": "HttpRequestMessageExtensionFacts.cs",
    "Description": "http request message extension facts",
    "WhenList": [],
    "ThenList": [
      "should get content type parameters from request"
    ],
    "Children": []
  },
  {
    "$id": "223",
    "FileName": "FileResourceProviderFacts.cs",
    "Description": "file resource provider facts",
    "WhenList": [],
    "ThenList": [
      "should get audience equal to pwc and all files given list of files"
    ],
    "Children": []
  },
  {
    "$id": "224",
    "FileName": "ImmigrationWorkRecordToDtoExtensionsFacts.cs",
    "Description": "immigration work record to dto extensions facts",
    "WhenList": [],
    "ThenList": [
      "should return immigration work record info",
      "should return organizer without questionnaire links when immigration work record has issues",
      "should not return consents status link"
    ],
    "Children": []
  },
  {
    "$id": "225",
    "FileName": "KpiOverviewAccessControlFacts.cs",
    "Description": "kpi overview access control facts",
    "WhenList": [],
    "ThenList": [
      "should can view engagement kpi overview when login with global admin",
      "should can view engagement kpi overview when login with engagement admin",
      "should can view engagement kpi overview when login with coordinating office primary contact not in the office",
      "should can view engagement kpi overview when login with coordinating office secondary contact",
      "should can view engagement kpi overview when login with coordinating office staff",
      "should can view engagement kpi overview when login with delegated coordinating office secondary contact",
      "should can view engagement kpi overview when login with subscribed office secondary contact",
      "should can view engagement kpi overview when login with subscribed office who is social security",
      "should can view engagement kpi overview when login with subscribed office engagement admin",
      "should can view engagement kpi overview when login with subscribed offce staff",
      "should can not view engagement kpi overview when staff not related to engaement"
    ],
    "Children": []
  },
  {
    "$id": "226",
    "FileName": "AssigeeMapperFacts.cs",
    "Description": "assigee mapper facts",
    "WhenList": [],
    "ThenList": [
      "should convert confirmed fror consent to assignee dto",
      "should return empty array if assignee does not have confirmed consents",
      "should return assignee basic information",
      "should get primary general contact whoes office located in home country of assignee",
      "should get primary general contact whoes office located in host country of assignee",
      "should get primary general contact according alphabetical order",
      "should set primary general contact as null when no general contacts",
      "should get team mailbox when engagement teambox is not null",
      "should get team phone number when engagement phone number is not null",
      "should get team display name when engagement display name is not null",
      "filter duplicate offices when mapping assignee to dto",
      "should not return invitation link when assignee has no contact"
    ],
    "Children": []
  },
  {
    "$id": "227",
    "FileName": "EngagementAuthorizationListReportBuilderFacts.cs",
    "Description": "engagement authorization list report builder facts",
    "WhenList": [],
    "ThenList": [
      "should generate report right format by assingee id and category",
      "should filter authorization list by country",
      "should filter authorization list only with authorized only filter",
      "should filter authorization list by assingee query",
      "should generate time data in report format",
      "should filter by calander year",
      "should show authorization list finalization status for one country",
      "should show authorization list finalization status for global",
      "should show authorization list finalization status for all calendar years",
      "should show finalization status for authorization items"
    ],
    "Children": []
  },
  {
    "$id": "228",
    "FileName": "ReportHelperFacts.cs",
    "Description": "report helper facts",
    "WhenList": [],
    "ThenList": [
      "should set report generated time in specified timezone"
    ],
    "Children": []
  },
  {
    "$id": "229",
    "FileName": "AccountSyncRepositoryFacts.cs",
    "Description": "account sync repository facts",
    "WhenList": [],
    "ThenList": [
      "should update concurrentcy"
    ],
    "Children": []
  },
  {
    "$id": "230",
    "FileName": "EFileStatusRepositoryFacts.cs",
    "Description": "e file status repository facts",
    "WhenList": [],
    "ThenList": [
      "should create new efilestatus"
    ],
    "Children": []
  },
  {
    "$id": "231",
    "FileName": "EngagementRepositoryFacts.cs",
    "Description": "engagement repository facts",
    "WhenList": [],
    "ThenList": [
      "should save tax if not set practice type",
      "should eager load engagement assignment types",
      "should save practice type"
    ],
    "Children": []
  },
  {
    "$id": "232",
    "FileName": "FeatureListRepositoryFacts.cs",
    "Description": "feature list repository facts",
    "WhenList": [],
    "ThenList": [
      "should get latest feature list"
    ],
    "Children": []
  },
  {
    "$id": "233",
    "FileName": "OutOfScopeWorkRepositoryFacts.cs",
    "Description": "out of scope work repository facts",
    "WhenList": [],
    "ThenList": [
      "should create out of scope work"
    ],
    "Children": []
  },
  {
    "$id": "234",
    "FileName": "QuerableAssigneeRepositoryFacts.cs",
    "Description": "querable assignee repository facts",
    "WhenList": [],
    "ThenList": [
      "should have all result when search top is minus one",
      "should not have assignee whose engagements are all inactive",
      "should have assignee who has any active engagement"
    ],
    "Children": []
  },
  {
    "$id": "235",
    "FileName": "StaffRepositoryFacts.cs",
    "Description": "staff repository facts",
    "WhenList": [],
    "ThenList": [
      "should find all staffs with only active status",
      "should not find inactive staff when get all with pending",
      "should find staff with active status by id",
      "should not find staff with pending status by id",
      "should not find staff with inactive status by id",
      "should not get active staff when find by id with pending",
      "should find staffs with active status by ids",
      "should veriry staff with active status existed"
    ],
    "Children": []
  },
  {
    "$id": "236",
    "FileName": "TaskTemplateRepositoryFacts.cs",
    "Description": "task template repository facts",
    "WhenList": [],
    "ThenList": [
      "should save task template"
    ],
    "Children": []
  },
  {
    "$id": "237",
    "FileName": "TaxReturnWorkRecordRepositoryFacts.cs",
    "Description": "tax return work record repository facts",
    "WhenList": [],
    "ThenList": [
      "should get actived tax work record with default",
      "should filter actived tax work record by service status",
      "should filter actived tax work record by assignee status",
      "should filter actived tax work record by year after",
      "should filter actived tax work record by foreign bank question set id",
      "should filter actived tax work record by engagements",
      "should filter actived tax work record by organizer",
      "should filter actived tax work record by having missing item"
    ],
    "Children": []
  },
  {
    "$id": "238",
    "FileName": "ConsentRequestBuilderFacts.cs",
    "Description": "consent request builder facts",
    "WhenList": [],
    "ThenList": [
      "should return valid consent request given assignee subsribes mytaxes",
      "should return valid consent request given assignee no questionset",
      "should return fror consent request given assignee has tax workrecord"
    ],
    "Children": []
  },
  {
    "$id": "239",
    "FileName": "UpdateAssigneeRequestTransformerFacts.cs",
    "Description": "update assignee request transformer facts",
    "WhenList": [],
    "ThenList": [
      "should merge data from request to assigne",
      "should throw exception when trying to remove all general contacts"
    ],
    "Children": []
  },
  {
    "$id": "240",
    "FileName": "AccountNotificationSenderFacts.cs",
    "Description": "account notification sender facts",
    "WhenList": [],
    "ThenList": [
      "should send email when unlock kayla",
      "should send email when unlock vincent",
      "should send invitation email to assignee and email history",
      "should send invitation email to my visas",
      "should send invitation email with culture by engagement",
      "should send invitation email to assignee with team mailbox",
      "should send invitation email to assignee with team mailbox and without display name"
    ],
    "Children": []
  },
  {
    "$id": "241",
    "FileName": "AssigneeServiceCreateAsyncFacts.cs",
    "Description": "assignee service create async facts",
    "WhenList": [],
    "ThenList": [
      "should create assignee with account id",
      "should return null and not create assignee when account creation fails"
    ],
    "Children": []
  },
  {
    "$id": "242",
    "FileName": "AssigneeServiceUpdateAsyncFacts.cs",
    "Description": "assignee service update async facts",
    "WhenList": [],
    "ThenList": [
      "should update assignee with account info",
      "should return null and not update assignee when updaing account fails"
    ],
    "Children": []
  },
  {
    "$id": "243",
    "FileName": "BriefingScheduleServiceFacts.cs",
    "Description": "briefing schedule service facts",
    "WhenList": [],
    "ThenList": [
      "should update corresponding address field",
      "should record history for selected briefing address changing",
      "should not record history for selected briefing address when address not changed",
      "should record history for selected briefing address when only change briefing method",
      "should not record history for selected briefing address firstly scheduled as by phone",
      "should record history for selected briefing address when change briefing method and target address",
      "should not record history for selected briefing address when change briefing method to by phone"
    ],
    "Children": []
  },
  {
    "$id": "244",
    "FileName": "BriefingWorkRecordNotificationSenderFacts.cs",
    "Description": "briefing work record notification sender facts",
    "WhenList": [],
    "ThenList": [
      "should send briefing work record notification email to uninvited assignee",
      "should send briefing work record notification email to assignee with team mailbox",
      "should only overwrite mail from when engagement with team mail box but not display name",
      "should only overwrite mail from when engagement with team mail box but no phone number",
      "should send email with correct client name when send notification to assignee"
    ],
    "Children": []
  },
  {
    "$id": "245",
    "FileName": "ConsentServiceFacts.cs",
    "Description": "consent service facts",
    "WhenList": [],
    "ThenList": [
      "should not load unsigned consent for paper questionnaire",
      "unsigned consent without confirm",
      "unsigned consent has confirm",
      "should return unsigned consent",
      "should get need warn consents when all consents needed",
      "should get need warn consents when fror need warn",
      "should get need warn consents according to required consents",
      "should get need warn consents regardless of confirmed unsigned consents",
      "should get need warn consents when part II not sign",
      "should get need warn consents according to part II"
    ],
    "Children": []
  },
  {
    "$id": "246",
    "FileName": "CustomizedEmailFormatServiceFacts.cs",
    "Description": "customized email format service facts",
    "WhenList": [],
    "ThenList": [
      "should forbidden other not allowed html tag",
      "should allow supported html tag"
    ],
    "Children": []
  },
  {
    "$id": "247",
    "FileName": "EngagementGlobalComplianceKpiServiceFacts.cs",
    "Description": "engagement global compliance kpi service facts",
    "WhenList": [],
    "ThenList": [
      "should calculate global compliance in current quartar given no work record available",
      "should get global compliance of 0 in current quartar given one work record of not delivered",
      "should calculate global compliance in q 1 as current quartar given work record delivered",
      "should include work record whose responsible office is unsubscribed from engagement",
      "should include not delivered work record whose responsible office is unsubscribed from engagement",
      "should calculate global compliance in q 1 as current quartar given work records delivered among multiple engagements",
      "should calculate global compliance engagement average given work records among multiple engagements",
      "should calculate global compliance in 2 as current quartar given work record delivered",
      "should calculate global compliance in 3 as current quartar given work record delivered",
      "should calculate global compliance in 4 as current quartar given work record delivered",
      "should calculate global compliance in specific year given work record delivered in different years",
      "should calculate global compliance in the year before last year given work record delivered in different years",
      "should calculate global compliance in current quartar given one work record delivered and one not deliverd",
      "should calculate global compliance in current quartar given one work record of being cancelled",
      "should calculate global compliance in current quartar given one work record of being declined",
      "should treat non complier as not completed when calculating global compliance",
      "should treat no filing requirement as completed when calculating global compliance",
      "should calculate global compliance in current quartar given 2 delivered work record in different offices",
      "should not calculate global compliance for 315 office",
      "should get 1 as current global compliance when all the work records in the office are delivered",
      "should get current global compliance when part of the workrecords in the office are delivered",
      "should get current global compliance when part of the workrecords in different offices are delivered in 3"
    ],
    "Children": []
  },
  {
    "$id": "248",
    "FileName": "EngagementInternalKpiCalculatorFacts.cs",
    "Description": "engagement internal kpi calculator facts",
    "WhenList": [],
    "ThenList": [
      "given one office with no wokrecord",
      "given one office with one workrecod with kpi",
      "given one office with two workrecod with kpi",
      "given two office and one workrecod with kpi in first office and no workrecord in another office",
      "given two office and one workrecod with kpi in each office",
      "given two office with workrecod and third workrecod with office not in workoffices",
      "should ranking be 1 1 3",
      "should ranking be 1 2 2 4"
    ],
    "Children": []
  },
  {
    "$id": "249",
    "FileName": "KpiOverviewExtensionFacts.cs",
    "Description": "kpi overview extension facts",
    "WhenList": [],
    "ThenList": [
      "should return 100 overview percentage value for 1",
      "should return null overview percentage value for null value",
      "should return overview percentage value for 0",
      "should return overview percentage value for value greater than 1",
      "should return overview percentage value for value less than 1"
    ],
    "Children": []
  },
  {
    "$id": "250",
    "FileName": "MissingItemNotifyServiceFacts.cs",
    "Description": "missing item notify service facts",
    "WhenList": [],
    "ThenList": [
      "should send missing items reminder"
    ],
    "Children": []
  },
  {
    "$id": "251",
    "FileName": "NewAccountResourceProviderFacts.cs",
    "Description": "new account resource provider facts",
    "WhenList": [],
    "ThenList": [
      "should return null when getting account and new account service is not available",
      "should return null when creating account and new account service is not available",
      "should return null when creating subscription and new account service is not available"
    ],
    "Children": []
  },
  {
    "$id": "252",
    "FileName": "NotificationServiceProviderFacts.cs",
    "Description": "notification service provider facts",
    "WhenList": [],
    "ThenList": [
      "should save send email record when notify",
      "should save send client contacts email record when notify"
    ],
    "Children": []
  },
  {
    "$id": "253",
    "FileName": "QuestionnaireActivatorFacts.cs",
    "Description": "questionnaire activator facts",
    "WhenList": [],
    "ThenList": [
      "should throw conflict exception when questionnaire is already activated",
      "should throw forbidden exception when due date is earlier than now",
      "should activated tax return successful",
      "should change my taxes account status to inactivate",
      "should activate immigration questionnaire"
    ],
    "Children": []
  },
  {
    "$id": "254",
    "FileName": "TaxReturnFileServiceDeleteEventFact.cs",
    "Description": "tax return file service delete event fact",
    "WhenList": [],
    "ThenList": [
      "should delete tax return file when delete file"
    ],
    "Children": []
  },
  {
    "$id": "255",
    "FileName": "TaxReturnFileServicePublishEventFact.cs",
    "Description": "tax return file service publish event fact",
    "WhenList": [],
    "ThenList": [
      "should save tax return file when publish file",
      "should not save tax return file when document type is not tax return",
      "should not save tax return file when related resource is not match rule"
    ],
    "Children": []
  },
  {
    "$id": "256",
    "FileName": "TaxReturnFileServiceUploadEventFact.cs",
    "Description": "tax return file service upload event fact",
    "WhenList": [],
    "ThenList": [
      "should save tax return file when upload file",
      "should not save tax return file when document type is not tax return",
      "should not save tax return file when related resource is not match rule",
      "should not save tax return file when audience is pw c"
    ],
    "Children": []
  },
  {
    "$id": "257",
    "FileName": "DateRangeFacts.cs",
    "Description": "date range facts",
    "WhenList": [],
    "ThenList": [
      "should throw exception when start date after end date",
      "should be able to create date range if start date and end date are the same",
      "should has overlap if this range contains another range",
      "should has overlap if another range contains this range",
      "should has overlap if this range start date in another range and end date not",
      "should has overlap if this range end date in another range and start date not",
      "should has overlap if this range start date is the same day with another range end date",
      "should has overlap if this range end date is the same day with another range start date",
      "should not has overlap if this range before another range",
      "should not has overlap if this range after another range",
      "should ignore time when calculate overlap"
    ],
    "Children": []
  },
  {
    "$id": "258",
    "FileName": "ExpressionExtensionFacts.cs",
    "Description": "expression extension facts",
    "WhenList": [],
    "ThenList": [
      "conditional where fact",
      "where if fact"
    ],
    "Children": []
  },
  {
    "$id": "259",
    "FileName": "ICalendarFacts.cs",
    "Description": "i calendar facts",
    "WhenList": [],
    "ThenList": [
      "should generate simple icalendar content",
      "should generate icalendar content with some default value when first time create",
      "should generate icalendar content with event start and end time",
      "should generate icalendar content with event start and end time when start time is midnight",
      "should generate icalendar content with event title and description",
      "should generate icalendar content with alternative rich formated description",
      "should generate icalendar content with location",
      "should generate icalendar content with organizer",
      "should generate icalendar content with attendees",
      "should generate icalendar content with unique id"
    ],
    "Children": []
  },
  {
    "$id": "260",
    "FileName": "BasicInfoFacts.cs",
    "Description": "basic info facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when primary service uri is null",
      "should be invalid when primary services type does not match to task template practice type",
      "should be invalid when engagement is not belongs to assignee client",
      "should be invalid when service uris not all exist",
      "should be invalid if engagement template uri is invalid",
      "should be invalid if task template uri is invalid",
      "should be invalid when checklist template uri is not correct",
      "should be invalid when engagement checklist template uri is not correct",
      "should be invalid when set engagement task template as engagement checklist template",
      "should be invalid when set engagement task template as task template",
      "should be invalid when set task template as engagement task template",
      "should be invalid when set engagement checklist template as checklist template",
      "should be invalid when set checklist template as engagement checklist template",
      "should be invalid when miss task assignment for applied template",
      "should be invalid when rsponsibility does not belong responsible office"
    ],
    "Children": [
      {
        "$id": "261",
        "FileName": "BasicInfoFacts.cs",
        "Description": "dummy batch create assingee work record request validator",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "262",
    "FileName": "ChecklistFacts.cs",
    "Description": "checklist facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when checklist template uri is not correct",
      "should be invalid when engagement checklist template uri is not correct",
      "should be invalid when work record responsible office not subscribed",
      "should be invalid when with invalid definition id",
      "should be invalid when with duplicate definition id",
      "should be invalid when with responsible office not belong subscribed"
    ],
    "Children": [
      {
        "$id": "263",
        "FileName": "ChecklistFacts.cs",
        "Description": "dummy batch create assingee work record request validator",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "264",
    "FileName": "ImmigrationFacts.cs",
    "Description": "immigration facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid if initiation date is invalid",
      "should be invalid if clear for travel project date is invalid",
      "should be invalid if clear for work project date is invalid",
      "should be invalid if completion project date is invalid",
      "should be invalid organizer request",
      "should be valid organizer request",
      "should be valid additional service task assignments request"
    ],
    "Children": []
  },
  {
    "$id": "265",
    "FileName": "TaxOrganizerFacts.cs",
    "Description": "tax organizer facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid if questionnaire is empty when create tax return work record",
      "should be invalid if due date is empty when create tax return work record"
    ],
    "Children": []
  },
  {
    "$id": "266",
    "FileName": "TeqSettlementBatchUpdateStatusRequestValidatorFacts.cs",
    "Description": "teq settlement batch update status request validator facts",
    "WhenList": [],
    "ThenList": [
      "should return error when status is unknown",
      "should return error when status is settled and date is null",
      "should return error when status is waiting for refund and date is null",
      "should return error when status is waiting for refund and date is a past date",
      "should return error when status is new",
      "should return error when status is partial payment"
    ],
    "Children": []
  },
  {
    "$id": "267",
    "FileName": "TeqSettlementDeletePaymentRequestValidatorFacts.cs",
    "Description": "teq settlement delete payment request validator facts",
    "WhenList": [],
    "ThenList": [
      "should return error when status is unknown",
      "should return error when next payment date is not a future date",
      "should return error when comment has more than 2000 characters",
      "should return error when has comment and delete by is null",
      "should be valid if comment is null or empty"
    ],
    "Children": []
  },
  {
    "$id": "268",
    "FileName": "AssigneeMailRequestValidatorFacts.cs",
    "Description": "assignee mail request validator facts",
    "WhenList": [],
    "ThenList": [
      "should return error when exceed max length",
      "should return error when mail has double quote character within send from",
      "should not return error when mail has following sepecial chars",
      "should return error when mail has double quote character within cc"
    ],
    "Children": []
  },
  {
    "$id": "269",
    "FileName": "AssigneeStatusMapperFacts.cs",
    "Description": "assignee status mapper facts",
    "WhenList": [],
    "ThenList": [
      "should map go assignee status to tiger assignee status"
    ],
    "Children": []
  },
  {
    "$id": "270",
    "FileName": "AssigneeValidatorFacts.cs",
    "Description": "assignee validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when family member firstname is null or empty",
      "should be invalid when family member firstname is longer than 255 characters",
      "should be invalid when family member lastname is null or empty",
      "should be invalid when family member lastname is longer than 255 characters",
      "should be invalid when assignment start date is after expected end date",
      "should be invalid when assignment start date is after actual end date",
      "should be invalid when passport country is empty",
      "should be valid when passport number is empty",
      "should be valid when engagements has different clients with assignee",
      "should be invalid when contact engagement not in assignee engagements"
    ],
    "Children": []
  },
  {
    "$id": "271",
    "FileName": "BatchCreateBriefingWorkRecordRequestValidatorFacts.cs",
    "Description": "batch create briefing work record request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid if scheduling method does not exist",
      "should be invalid if work record type is not briefing",
      "should be invalid if scheduling method is empty",
      "should be invalid if scheduling method is online and available briefing methods is empty",
      "should be invalid if scheduling method is online and any of available briefing methods does not exist",
      "should be invalid if scheduling method is online and available briefing methods duplicated",
      "should be valid if available scheduling method is manually and briefing method is empty",
      "should be invalid if briefing coordinator is missing when scheduling method is online",
      "should be valid if briefing coordinator is provided when scheduling method is online",
      "should be invalid if online wr use other briefing method and name of other briefing method is empty",
      "should not complain about briefing coordinator if briefing coordinator is empty when scheduling method is manually",
      "should be invalid if briefing work record is manually"
    ],
    "Children": []
  },
  {
    "$id": "272",
    "FileName": "BatchUpdateCountryTypeOfServiceRequestValidatorFacts.cs",
    "Description": "batch update country type of service request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when updating jurisdiction of used service",
      "should be invalid when updating practice type of used service",
      "should be invalid when updating without master chart of service"
    ],
    "Children": []
  },
  {
    "$id": "273",
    "FileName": "BatchUpdateTaxReturnWorkRecordRequestValidatorFacts.cs",
    "Description": "batch update tax return work record request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when questionnaire due date is valid future date",
      "should be invalid when questionnaire due date is incorrect",
      "should be invalid when questionnaire due date is past",
      "should be invalid when tax contact uri is incorrect",
      "should be valid when tax contact uri is correct"
    ],
    "Children": []
  },
  {
    "$id": "274",
    "FileName": "BatchUpdateWorkRecordAssignmentRequestValidatorFacts.cs",
    "Description": "batch update work record assignment request validator fact",
    "WhenList": [],
    "ThenList": [
      "should be invalid when assginment is no in work record assignee assignments",
      "should be invalid when work record is not exist"
    ],
    "Children": []
  },
  {
    "$id": "275",
    "FileName": "BatchUpdateWorkRecordRequestValidatorFacts.cs",
    "Description": "batch update work record request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when request estimated completion date is valid future date",
      "should be valid when request estimated completion date is null or empty",
      "should be invalid when request estimated completion date is incorrect",
      "should be invalid when team is not existed"
    ],
    "Children": []
  },
  {
    "$id": "276",
    "FileName": "BriefingWorkRecordValidatorFacts.cs",
    "Description": "briefing work record validator facts",
    "WhenList": [],
    "ThenList": [
      "should fail validation when online briefing coordinator is empty",
      "should fail validation when online briefing coordinator is not acl for restricted engagement",
      "should be valid when online briefing coordinator is acl for restricted engagement",
      "should fail validation when online briefing coordinator is not acl for restricted assignee",
      "should be valid when online briefing coordinator is acl for restricted assignee",
      "should fail validation when online briefing coordinator practice type differs from work record practice type",
      "should not complain about online briefing coordinator if belongs to coordinating office",
      "should not complain about online briefing coordinator if belongs to delegated office",
      "should not complain about online briefing coordinator if belongs to subscribed office",
      "should fail validation when online briefing coordinator is not in any of coordinating or delegated or subscribed offices",
      "should fail validation if briefing coordinator is present for mannually briefing work record"
    ],
    "Children": []
  },
  {
    "$id": "277",
    "FileName": "ChecklistTemplateValidatorFacts.cs",
    "Description": "checklist template validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when name is invalid",
      "should be invalid when name exceeds max length limit 255",
      "should be invalid when owned by is null",
      "should be invalid when task definitions is empty",
      "should be invalid when task name is invalid",
      "should be invalid when task name exceeds max length limit 255",
      "should be invalid when office subscription is duplicated",
      "should be invalid when country subscription is duplicated",
      "should be invalid when country subscription includes office subscription"
    ],
    "Children": []
  },
  {
    "$id": "278",
    "FileName": "ClientRequestValidatorFacts.cs",
    "Description": "client request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when general user approve or reject a client request",
      "should be invalid when status is unknown",
      "should be valid when evelyn approve or reject"
    ],
    "Children": []
  },
  {
    "$id": "279",
    "FileName": "ConsentSignConfirmRequestValidatorFacts.cs",
    "Description": "consent sign confirm request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when confirm fror was signed before today",
      "should be invalid when confirm fror was signed more than 90 days ago",
      "should be valid when confirm 7216 was signed before today"
    ],
    "Children": []
  },
  {
    "$id": "280",
    "FileName": "CreateAssigneeCsvRequestValidatorFacts.cs",
    "Description": "create assignee csv request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when all fields are correct",
      "should be valid when family relationship is correct",
      "should be invalid when gender is incorrect",
      "should be valid when gender is correct",
      "should be valid when gender is empty",
      "should be valid when no family member",
      "should be invalid when has family date of birth and family relationship is empty",
      "should be invalid when has family country and family relationship is empty",
      "should be invalid when has family first name and family relationship is empty",
      "should be invalid when has family last name and family relationship is empty",
      "should be invalid when has family taxpayer id and family relationship is empty",
      "should be invalid when family relationship is incorrect",
      "should be valid when timezone is empty",
      "should be invalid when timezone is not in repository",
      "should be invalid when family date of birth is incorrect date",
      "should be invalid when date of birth is incorrect date",
      "should be invalid when assignment start date is incorrect date",
      "should be invalid when assignment actual end date is incorrect date",
      "should be invalid when assignment expected end date is incorrect date",
      "should be invalid when contact GUID is not given",
      "should be invalid when contact is not exist",
      "should be invalid when family relationship and gender is incorrect",
      "should be valid when country is null or empty",
      "should be invalid when country is invalid",
      "should be valid when assignment country is null or empty",
      "should be invalid when assignment country is invalid",
      "should be valid when family country is null or empty",
      "should be invalid when family country is invalid",
      "should be valid when home country is null or empty",
      "should be invalid when home country is invalid",
      "should be valid when passport country is null or empty",
      "should be invalid when passport country is invalid"
    ],
    "Children": []
  },
  {
    "$id": "281",
    "FileName": "CreateAssigneeRequestValidatorFacts.cs",
    "Description": "create assignee request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when date of birth is empty or null",
      "should be invalid when custom field value not valid",
      "should be valid when host country uri is empty or null"
    ],
    "Children": []
  },
  {
    "$id": "282",
    "FileName": "CreateAssingeeRequestValiatorFacts.cs",
    "Description": "create assingee request valiator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid",
      "should be invalid if date of birth is null or empty",
      "should be invalid if date of birth is not a correct date",
      "should be invalid if first name is null or empty",
      "should be invalid if last name is null or empty",
      "should be invalid if primary email is null or empty",
      "should be invalid if primary email is incorrect",
      "should be invalid if engagement uri is null or empty",
      "should be invalid if engagement uri is incorrect",
      "should be invalid if engagement is inactive",
      "should be invalid if home country uri is null or empty",
      "should be invalid if home country uri is incorrect",
      "should be invalid if host country uri is incorrect",
      "should be invalid when date of birth is empty or null",
      "should be valid when host country uri is empty or null"
    ],
    "Children": []
  },
  {
    "$id": "283",
    "FileName": "CreateChecklistTemplateRequestValidatorFacts.cs",
    "Description": "create checklist template request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when checklist task definitions is not given",
      "should be invalid when neither engagement id nor subscriptions is provided",
      "should be invalid when practice type is invalid",
      "should be valid"
    ],
    "Children": []
  },
  {
    "$id": "284",
    "FileName": "CreateChecklistTemplateRequestValidatorForRestrictedEngagementFacts.cs",
    "Description": "create checklist template request validator for restricted engagement facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when user is on restricted engagement acl",
      "should be invalid when user is not on restricted engagement acl"
    ],
    "Children": []
  },
  {
    "$id": "285",
    "FileName": "CreateClientRequestValidatorFacts.cs",
    "Description": "create client request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid given invalid data",
      "should be invalid when note is more than 2000",
      "should be invalid when request reason is more than 2000",
      "should be valid given valid create client request",
      "should be invalid when request by is not long"
    ],
    "Children": []
  },
  {
    "$id": "286",
    "FileName": "CreateEmployerWorkRecordRequestValidatorFacts.cs",
    "Description": "create employer work record request validator facts",
    "WhenList": [],
    "ThenList": [
      "should valid with correct request",
      "should be invalid if employer work record name or year or primary service or responsible office or engagement is empty",
      "should be invalid if month is present but not valid",
      "should be invalid if employer work record year is less than min year"
    ],
    "Children": []
  },
  {
    "$id": "287",
    "FileName": "CreateEngagementRequestValidatorFacts.cs",
    "Description": "create engagement request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when create engagement with invalid name",
      "should be invalid when create engagement with invalid client",
      "should be invalid when create engagement without contact",
      "should be invalid when create engagement with invalid contact",
      "should be invalid when practice type is invalid",
      "should be invalid when create engagement with invalid coordinating office",
      "should be invalid when create engagement with invalid engagement admins",
      "should be invalid if engament admin is not same practice type",
      "should be invalid if there is more than two engament admins",
      "should be invalid when create engagement with duplicate engagement admin",
      "should be invalid if office contact practice type is not engagement practice type",
      "should be invalid when coordinating office mailing addresses fields more then 50",
      "should be valid when coordinating office mailing address is empty",
      "should be invalid when coordinating office mailing address is not correct format",
      "should be invalid when mailing address is empty team display name is not empty",
      "should be invalid when mailing address is empty team phone number is not empty"
    ],
    "Children": []
  },
  {
    "$id": "288",
    "FileName": "CreateTagRequestValidatorFacts.cs",
    "Description": "create tag request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be true when is valid request",
      "should be false when office is invalid",
      "should be false when office name is not unique"
    ],
    "Children": []
  },
  {
    "$id": "289",
    "FileName": "CreateTaskTemplateRequestValidatorFacts.cs",
    "Description": "create task template request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when neither country nor office is not provided",
      "should be valid when at least one of country or office uri is provided",
      "should be invalid when practice type is invalid"
    ],
    "Children": []
  },
  {
    "$id": "290",
    "FileName": "CreateTaskTemplateRequestValidatorForRestrictedEngagementFacts.cs",
    "Description": "create task template request validator for restricted engagement facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when user is on restricted engagement acl",
      "should be invalid when user is not on restricted engagement acl"
    ],
    "Children": []
  },
  {
    "$id": "291",
    "FileName": "CreateVideoBriefingRequestValidatorFacts.cs",
    "Description": "create video briefing request validator facts",
    "WhenList": [],
    "ThenList": [
      "should invalid when name length is 201",
      "should invalid when country uri is invalid",
      "should invalid when engagement uri is invalid",
      "should invalid when engagement practice type is not in practice types filed",
      "should valid when request is valid"
    ],
    "Children": []
  },
  {
    "$id": "292",
    "FileName": "CustomFieldEngagementRepositoryFacts.cs",
    "Description": "create custom field request validator facts base",
    "WhenList": [],
    "ThenList": [
      "should pass validation when all valid",
      "should fail when location is emtpy",
      "should fails validation when name empty",
      "should fail validation when custom field type is not valid",
      "should fail validation when custom field list contents is not valid",
      "should have at least one list content for list type custom field",
      "should fail when practice type is emtpy"
    ],
    "Children": []
  },
  {
    "$id": "293",
    "FileName": "CustomFieldEngagementRepositoryFacts.cs",
    "Description": "custom field engagement repository facts",
    "WhenList": [],
    "ThenList": [
      "should fail validation when engagement id is null",
      "should fail when engagement id not exist"
    ],
    "Children": []
  },
  {
    "$id": "294",
    "FileName": "EmailFormatValidatorFacts.cs",
    "Description": "email format validator facts",
    "WhenList": [],
    "ThenList": [
      "should succeed given an valid email address",
      "should fail given an malformed email address",
      "should fail given a well formed email address but who exceeds the max lenth limit"
    ],
    "Children": []
  },
  {
    "$id": "295",
    "FileName": "EmployerReturnFileInfoRequestValidatorFacts.cs",
    "Description": "employer return file info request validator facts",
    "WhenList": [],
    "ThenList": [
      "should invalid when status is not new and decided by email is null or empty",
      "should invalid when status is not new and decided by name is null or empty",
      "should invalid when status is not new and decision date is null or empty",
      "should invalid when status is not new and decision date is in future",
      "should invalid when employer return type is empty",
      "should invalid when employer return type is not annual or clearance"
    ],
    "Children": []
  },
  {
    "$id": "296",
    "FileName": "EmployerReturnNotificationRequestValidatorFacts.cs",
    "Description": "employer return notification request validator facts",
    "WhenList": [],
    "ThenList": [
      "should invalid when send from sofia email address is null or empty",
      "should invalid when send to nancy email address is null or empty",
      "should invalid when to email address is invalid",
      "should invalid when from email address is invalid"
    ],
    "Children": []
  },
  {
    "$id": "297",
    "FileName": "EmployerWorkRecordSearchRequestValidatorFacts.cs",
    "Description": "employer work record search request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when responsible office uri is invalid",
      "should be invalid when engagement uri is invalid",
      "should be invalid when month is invalid",
      "should be valid when request is null"
    ],
    "Children": []
  },
  {
    "$id": "298",
    "FileName": "EmployerWorkRecordValidatorFact.cs",
    "Description": "employer work record validator fact",
    "WhenList": [],
    "ThenList": [
      "should valid if work record is valid",
      "should fail validation when work record name exceeds 255 chars",
      "should fail validation when work record name is blank",
      "should fail validation when primary service is null",
      "should fail validation when engagement is null"
    ],
    "Children": []
  },
  {
    "$id": "299",
    "FileName": "EngagementRoleReassignRequestValidatorFacts.cs",
    "Description": "engagement role reassign request validator facts",
    "WhenList": [],
    "ThenList": [
      "should return invalid when assign to staff with invalid practice type",
      "should return invalid when reassign subscribed and delegated office responsibility to staff in other office"
    ],
    "Children": []
  },
  {
    "$id": "300",
    "FileName": "EngagementTypeOfServiceUpdateServiceValidatorFacts.cs",
    "Description": "engagement type of service create service validator facts",
    "WhenList": [],
    "ThenList": [
      "should validate engagment type of service name and status string",
      "should be invalid if country type of service is invalid and engagement service is active"
    ],
    "Children": []
  },
  {
    "$id": "301",
    "FileName": "HistoryItemValidatorFacts.cs",
    "Description": "history item validator facts",
    "WhenList": [],
    "ThenList": [
      "should succeed when history item is valid",
      "should fail when property what is empty",
      "should fail when property when is empty",
      "should allow pass when property modifier id is zero",
      "should allow to pass when property modifier type is empty"
    ],
    "Children": []
  },
  {
    "$id": "302",
    "FileName": "MilestoneMovementConditionFacts.cs",
    "Description": "milestone movement validator facts",
    "WhenList": [],
    "ThenList": [
      "should be success when move milestone from others to delivered",
      "should be success when move immigration work record milestone when questionnaire is not submitted",
      "should be not allow when move immigration work record milestone to done when questionnaire is not submmited",
      "should throw exception when move milestone from others to record created when work record has organizer",
      "should throw exception when move milestone from others to in preparation",
      "should throw exception when move milestone from record created when work record has outstanding organizer",
      "should not throw exception when move milestone to done for uk workrecord without irmark"
    ],
    "Children": []
  },
  {
    "$id": "303",
    "FileName": "OrganizerUpdateRequestValidatorFacts.cs",
    "Description": "organizer update request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid for contact and contact office",
      "should be valid for contact and contact office"
    ],
    "Children": []
  },
  {
    "$id": "304",
    "FileName": "OrganizerValidatorFacts.cs",
    "Description": "organizer validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid if tax contact is null and contact office without display name",
      "should be invalid if contact office does not belong to engagement offices",
      "should be invalid if contact office is null",
      "should be valid if contact is null and contact office has team display name",
      "should be valid if tax contact exist and contact office without display name"
    ],
    "Children": []
  },
  {
    "$id": "305",
    "FileName": "OutOfScopeWorkRequestValidatorFacts.cs",
    "Description": "out of scope work request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when add out of scope work with invalid data",
      "should be valid when add out of scope work with valid data"
    ],
    "Children": []
  },
  {
    "$id": "306",
    "FileName": "SocialSecurityWorkRecordValidatorFacts.cs",
    "Description": "social security work record validator facts",
    "WhenList": [],
    "ThenList": [
      "should pass when start date earlier than expiry date",
      "should pass when start date equal than expiry date",
      "should fail when start date later than expiry date",
      "should pass when have both start date and expiry date and mark work record to complete",
      "should fail when only have start date and mark work record to complete",
      "should fail when only have expiry date and mark work record to complete"
    ],
    "Children": []
  },
  {
    "$id": "307",
    "FileName": "StaffApprovementRequestValidatorFacts.cs",
    "Description": "staff approvement request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when practice type is not in pending practice type",
      "should be valid when practice type is in pending practice type"
    ],
    "Children": []
  },
  {
    "$id": "308",
    "FileName": "StaffRequestValidatorFacts.cs",
    "Description": "staff request validator facts",
    "WhenList": [],
    "ThenList": [
      "should staff request validator fails when the count of office level role has reached threshold",
      "should immi staff request validator success when the count of office level role with tax practice type has reached threshold",
      "should origin staff request validator success when the count of office level role has reached threshold and not changing access or office",
      "should stafff request fails when the count of country level role has reach threshold",
      "should staff request fails when delete one or more employee ids"
    ],
    "Children": []
  },
  {
    "$id": "309",
    "FileName": "StaffValidatorFacts.cs",
    "Description": "staff validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when staff has duplicate guids",
      "should be invalid when staff guid same as other staff",
      "should be invalid when staff guid same as pending staff",
      "should be invalid when staff guid same as inactive staff",
      "should be invalid when one of staff guids is empty",
      "should be invalid when staff guid is empty",
      "should be invalid when staff guid exceeds 20"
    ],
    "Children": []
  },
  {
    "$id": "310",
    "FileName": "TaskTemplateValidatorFacts.cs",
    "Description": "task template validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when office subscription is duplicated",
      "should be invalid when country subscription is duplicated",
      "should be invalid when country subscription includes office subscription",
      "should be valid when two different countries subscribed"
    ],
    "Children": []
  },
  {
    "$id": "311",
    "FileName": "TaxEqualizationRequestValidatorFacts.cs",
    "Description": "tax equalization request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when tax equalization amount equals 0",
      "should be invalid if currency is empty or unknown",
      "should be invalid if date finalized is empty or null",
      "should be invalid if date finalized is in the future"
    ],
    "Children": []
  },
  {
    "$id": "312",
    "FileName": "TigerValidatorFacts.cs",
    "Description": "tiger validator facts",
    "WhenList": [],
    "ThenList": [
      "should throw validation error exception when validation fails",
      "should throw conflict exception when validation fails",
      "should throw conflict exception when multi exception coexisting"
    ],
    "Children": [
      {
        "$id": "313",
        "FileName": "TigerValidatorFacts.cs",
        "Description": "fake i index",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      },
      {
        "$id": "314",
        "FileName": "TigerValidatorFacts.cs",
        "Description": "fake validator",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      },
      {
        "$id": "315",
        "FileName": "TigerValidatorFacts.cs",
        "Description": "fake entity",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "316",
    "FileName": "UpdateAssigneeClientEngagementRequestValidatorFacts.cs",
    "Description": "update assignee client engagement request validator facts",
    "WhenList": [],
    "ThenList": [
      "should valid given engagement uri is valid when association empty",
      "should valid given update association only",
      "should valid given update association and engagement",
      "should invalid given engagement uri is invalid",
      "should invalid given association",
      "should valid when one effective date null",
      "should invalid when all effective dates null"
    ],
    "Children": []
  },
  {
    "$id": "317",
    "FileName": "UpdateAssigneeRequestValidatorFacts.cs",
    "Description": "update assignee request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when gender is invalid",
      "should be invalid when status is invalid",
      "should be invalid when contact is not responsible for engagement",
      "should be invalid when contact staff practice type does not match engagement practice type"
    ],
    "Children": []
  },
  {
    "$id": "318",
    "FileName": "UpdateEngagementCoordinatingOfficeRequestValidatorFacts.cs",
    "Description": "update engagement coordinating office request validator facts",
    "WhenList": [],
    "ThenList": [
      "should correct request",
      "should invalidate when contacts duplicate",
      "should correct when director when contacts but no director or manager",
      "should invalidate when contacts in coordinating office is empty",
      "should invalidate when contacts and engagement have different practice types",
      "should invalidate when contacts not exist",
      "should be invalid when coordinating office mailing addresses fields more then 50",
      "should be valid when coordinating office mailing address is empty",
      "should be invalid when coordinating office mailing address is not correct format",
      "should be invalid when mailing address is empty team display name is not empty",
      "should be invalid when mailing address is empty team phone number is not empty",
      "should be invalid when delegated offices dup"
    ],
    "Children": []
  },
  {
    "$id": "319",
    "FileName": "UpdateEngagementRequestValidatorFacts.cs",
    "Description": "update engagement request validator facts",
    "WhenList": [],
    "ThenList": [
      "should correct request",
      "should invalid when engagement name is duplicate in same client",
      "should valid when engagement name is duplicate in different client"
    ],
    "Children": []
  },
  {
    "$id": "320",
    "FileName": "UpdateEngagementRoleRequestValidatorFacts.cs",
    "Description": "update engagement role request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when request is correct",
      "should be invalid when engagement role not exist",
      "should be invalid when engagement role has mismatched practice type",
      "should be invalid when engagement role 2 has mismatched practice type"
    ],
    "Children": []
  },
  {
    "$id": "321",
    "FileName": "UpdateEngagementTypeOfServiceFeesCurrencyRequestValidatorFacts.cs",
    "Description": "update engagement type of service fees currency request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when request currency is null",
      "should be invalid when request currency is not existing"
    ],
    "Children": []
  },
  {
    "$id": "322",
    "FileName": "UpdateEngagementWorkOfficeRequestValidatorFacts.cs",
    "Description": "update engagement work office request validator facts",
    "WhenList": [],
    "ThenList": [
      "should correct request",
      "should correct when working office contact duplicated",
      "should correct when working office engaged staffs only with contacts",
      "should invalid when working office not exist",
      "should invalid when working office engaged staffs empty",
      "should be invalid when working office contacts not exist",
      "should be invalid when working office duplicated",
      "should invalid when working office same as coordinating office",
      "should invalid when working office same as delegated coordinating office",
      "should be true when subscribed office team mail box is empty",
      "should be true when subscribed office team mail box is in white list",
      "should be false when subscribed office team mail box is not in white list",
      "should invalid if work offices is null"
    ],
    "Children": []
  },
  {
    "$id": "323",
    "FileName": "UpdateEngagementWorkOfficeRequestValidatorFacts.cs",
    "Description": "update engagement work office request validator facts with engagement role feature toggle on",
    "WhenList": [],
    "ThenList": [
      "should invalid when remove work office belonging to engagement role"
    ],
    "Children": []
  },
  {
    "$id": "324",
    "FileName": "UpdateExternalLinksRequestValidatorFacts.cs",
    "Description": "update external links request validator facts",
    "WhenList": [],
    "ThenList": [
      "display name should less than 255",
      "system name should not empty",
      "url should not empty",
      "url should be valid",
      "should create less than 5 links for single work record"
    ],
    "Children": []
  },
  {
    "$id": "325",
    "FileName": "UpdateKpiSettingRequestValidatorFacts.cs",
    "Description": "update kpi setting request validator facts",
    "WhenList": [],
    "ThenList": [
      "should invalid when item is not in item list",
      "should invalid when type is not in type list",
      "should invalid when type is not match with item"
    ],
    "Children": []
  },
  {
    "$id": "326",
    "FileName": "UpdateTaskTemplateRequestValidatorFacts.cs",
    "Description": "update task template request validator facts",
    "WhenList": [],
    "ThenList": [
      "should be invalid when neither country nor office is not provided",
      "should be valid when at least one of country or office uri is provided"
    ],
    "Children": []
  },
  {
    "$id": "327",
    "FileName": "WorkRecordTaskValidatorFacts.cs",
    "Description": "work record task validator facts",
    "WhenList": [],
    "ThenList": [
      "should be valid when complete first miletone with date earlier than work record creation date",
      "should be invalid when complete miletone with date earlier than last milestone completion date"
    ],
    "Children": []
  },
  {
    "$id": "328",
    "FileName": "WorkRecordValidatorFacts.cs",
    "Description": "work record validator facts",
    "WhenList": [],
    "ThenList": [
      "should pass validation when work record is valid",
      "should fail validation when work record name is invalid",
      "should fail validation when work record name exceeds 255 chars",
      "should fail validation when primary service is null",
      "should fail validation when assignee is null",
      "should fail validation when engagement is null",
      "should fail validation when responsible office is null",
      "should fail validation when responsible office is not responsible for engagement",
      "should fail validation when unstarted milestones have dates",
      "should fail validation when finished milestones do not have dates",
      "should fail validation when milestone date in disorder",
      "should pass validation when only first milestone date earlier than creation date",
      "should fail validation when task assignment responsible office invalid",
      "should fail validation when task assignment responsibility invalid",
      "should fail validation when task assignment responsibility practice type does not match work record practice type",
      "should fail validation when checklist item responsible office invalid",
      "should fail validation when checklist item responsibility invalid",
      "should fail validation when checklist item responsibility practice type does not match work record practice type",
      "should success validation when organizer contact is null and contact office has team name",
      "should success validation when organizer contact is not null and contact office not has team name",
      "should fail validation when organizer question set id is empty"
    ],
    "Children": []
  },
  {
    "$id": "329",
    "FileName": "WorkRecordInfoAccessManagerFacts.cs",
    "Description": "work record info access manager can view private info facts",
    "WhenList": [],
    "ThenList": [
      "should can view work record PCN when staff assigned tasks",
      "should can view work record PCN when staff assigned checklist",
      "should can view work record PCN when staff is assignee pwc contact",
      "should can view work record PCN when staff is in responsible office",
      "should can view work record PCN when staff is in work record team",
      "should can not view work record PCN when staff not assigned tasks",
      "should can edit work record billing status when staff in work record responsible office",
      "should can not edit work record billing status when staff not in work record responsible office and coordinating office"
    ],
    "Children": []
  },
  {
    "$id": "330",
    "FileName": "WorkRecordInfoAccessManagerFacts.cs",
    "Description": "work record info access manager can view private info 2 facts",
    "WhenList": [],
    "ThenList": [
      "should can view work record PCN when staff is assignee pwc contact",
      "should can not view work record PCN when staff not assigned tasks",
      "should can view work record PCN when staff is in responsible office",
      "should can view work record PCN when staff is in work record team"
    ],
    "Children": []
  },
  {
    "$id": "331",
    "FileName": "CryptographyFacts.cs",
    "Description": "cryptography facts",
    "WhenList": [],
    "ThenList": [
      "should encrypt text",
      "encrypted text should not be same among multiple encryption",
      "encrypted text can be decrypted"
    ],
    "Children": []
  },
  {
    "$id": "332",
    "FileName": "CurrentUserFacts.cs",
    "Description": "current user facts",
    "WhenList": [],
    "ThenList": [
      "should skip UAC when request from trusted clients",
      "should return false if it is not tiger general role",
      "should return true if it is general role from tiger"
    ],
    "Children": []
  },
  {
    "$id": "333",
    "FileName": "DictionnaryExtensionsFacts.cs",
    "Description": "dictionnary extensions facts",
    "WhenList": [],
    "ThenList": [
      "should add two uniq dictionaries",
      "should throw argument exception when add dictionaries with duplicate key"
    ],
    "Children": []
  },
  {
    "$id": "334",
    "FileName": "EnumExtensionsFacts.cs",
    "Description": "enum extensions facts",
    "WhenList": [],
    "ThenList": [
      "should throw argument null exception when value null or empty",
      "should throw argument exception when value is invalid enum",
      "should return different descriptions when enum types have same name"
    ],
    "Children": []
  },
  {
    "$id": "335",
    "FileName": "StringExtensionFacts.cs",
    "Description": "string extension facts",
    "WhenList": [],
    "ThenList": [
      "should convert to link for valid simple url",
      "should convert to link inside other text",
      "should insert http as part of link if it is not already included"
    ],
    "Children": []
  },
  {
    "$id": "336",
    "FileName": "Facts.cs",
    "Description": "facts",
    "WhenList": [],
    "ThenList": [
      "fact method name"
    ],
    "Children": []
  },
  {
    "$id": "337",
    "FileName": "ResourceUriHelperFacts.cs",
    "Description": "resource uri helper facts",
    "WhenList": [],
    "ThenList": [
      "should transfer tax workrecord to uri",
      "should transfer country to uri",
      "should get tax work record id given a resource uri",
      "should get work record id given a resource uri",
      "should build work record resource uri 1",
      "should build work record resource uri"
    ],
    "Children": []
  },
  {
    "$id": "338",
    "FileName": "BriefingAppointmentReminderJobFacts.cs",
    "Description": "briefing appointment reminder job facts",
    "WhenList": [],
    "ThenList": [
      "should invoke tiger api to send reminder eamils",
      "should not send upcoming notify email when current milestone is not complete",
      "should not send upcoming notify email when work record type is not briefing",
      "should not send upcoming notify email when work record type is not online",
      "should not send upcoming notify email when work had send",
      "should not send upcoming notify email when work status is not noissue",
      "should not send upcoming notify email when more than 48",
      "should not send upcoming notify email when appointment time before today"
    ],
    "Children": []
  },
  {
    "$id": "339",
    "FileName": "BriefingWorkRecordKPIJobFacts.cs",
    "Description": "briefing work record KPI job facts",
    "WhenList": [],
    "ThenList": [
      "should call tiger api to calculate tax return frontload"
    ],
    "Children": []
  },
  {
    "$id": "340",
    "FileName": "DaysCalculatorFact.cs",
    "Description": "days calculator fact",
    "WhenList": [],
    "ThenList": [
      "should calc daysinhouse correctly when mi in one day",
      "should calc daysinhouse correctly when mis in one day",
      "should calc daysinhouse correctly when mis not in one day",
      "should calc daysinhouse correctly when mis all in last day",
      "should calc daysinhouse correctly when each day have one",
      "should calc daysinhouse correctly when mis dup in one day"
    ],
    "Children": []
  },
  {
    "$id": "341",
    "FileName": "DaysCalculatorRegressionCaseInRSFact.cs",
    "Description": "days calculator regression case in RS fact",
    "WhenList": [],
    "ThenList": [
      "should clac daysinhouse correctly 1",
      "should clac daysinhouse correctly 2",
      "should clac daysinhouse correctly 3",
      "should clac daysinhouse correctly 4",
      "should clac daysinhouse correctly 5",
      "should clac daysinhouse correctly 6",
      "should clac daysinhouse correctly 8",
      "should clac daysinhouse correctly 9",
      "should clac daysinhouse correctly 10",
      "should clac daysinhouse correctly 11",
      "should clac daysinhouse correctly 12",
      "should clac daysinhouse correctly 13",
      "should clac daysinhouse correctly 14",
      "should clac daysinhouse correctly 15",
      "should clac daysinhouse correctly 7"
    ],
    "Children": []
  },
  {
    "$id": "342",
    "FileName": "DaysInHouseCalcFact.cs",
    "Description": "days in house calc fact",
    "WhenList": [],
    "ThenList": [
      "should calc daysinhouse correctly",
      "should calc immigration wr daysinhouse correctly",
      "should calc socialsecurity wr daysinhouse correctly",
      "should calc briefing wr daysinhouse correctly when not notified",
      "should calc briefing wr daysinhouse correctly when notified",
      "given completed wr and some missing item when all missing items has received and since and received both after postwork then calc daysinhouse and midays correctly",
      "given completed wr and some missing item when some missing items is not receive and since and received both after postwork then calc daysinhouse and midays correctly",
      "given completed wr and a missing item when missing item has received and since between created and postwork and received after postwork",
      "given completed wr and a missing item when missing item has not received and since between craeted and postwork and received after postwork",
      "given completed wr and a missing item when missing item has received and since before created and received between created and postwork",
      "given completed wr and a missing item when missing item has not received and since before created",
      "given completed wr and a missing item when missing item has received and since and received both between created and postwork",
      "given wr and a missing item when missing item has received and since and received both between created and postwork",
      "given wr and a missing item when missing item has not received and since before craeted",
      "given wr while it has organizer when questionniar submitted after created",
      "given wr while it has organizer and a missing item when questionniar submitted after created and mi since before submitted",
      "given wr while it has organizer and a missing item when questionniar submitted after created and mi received before submitted",
      "given wr with organizer and a missing item when organzier submit date mort than create at"
    ],
    "Children": []
  },
  {
    "$id": "343",
    "FileName": "EfileReminderFacts.cs",
    "Description": "efile reminder facts",
    "WhenList": [],
    "ThenList": [
      "should send first reminder email when download date is two days ago",
      "should send reminder email when is efile consent on switch off to on",
      "should not send reminder email when download date is 17 days ago",
      "should send second reminder email when first reminder date is seven days ago",
      "should send third reminder email when second reminder is seven days ago",
      "should not send reminder email when delivery date is null",
      "should not send reminder email when latest tax return file is null",
      "should not send reminder email when first downloaded date is null",
      "should not send reminder email when signed date is not null",
      "should not send reminder email when refused date is not null",
      "should not send reminder email when signed date is not null but earlier than dowloaded date base on clean sign date when republish tax return",
      "should not send reminder email when refused date is not null but earlier than dowloaded date base on clean sign date when republish tax return",
      "should load assignee first and last name in status",
      "should load responsible office team mail box as from"
    ],
    "Children": []
  },
  {
    "$id": "344",
    "FileName": "EventStoreConsumerJobFacts.cs",
    "Description": "event store consumer job facts",
    "WhenList": [],
    "ThenList": [
      "should consume engagement created event and send it to event store",
      "should remove messages after consume",
      "should end job and save queue message in msmq when event store throw exception",
      "should not work when enable msmq feature toggle close",
      "should consume messages by order"
    ],
    "Children": []
  },
  {
    "$id": "345",
    "FileName": "GlobalComplianceWorkRecordKPIJobFacts.cs",
    "Description": "global compliance work record KPI job facts",
    "WhenList": [],
    "ThenList": [
      "should call tiger api to calculate global compliance kpi"
    ],
    "Children": []
  },
  {
    "$id": "346",
    "FileName": "MonitorUserLastLoginFacts.cs",
    "Description": "monitor user last login facts",
    "WhenList": [],
    "ThenList": [
      "should send email when general staff last login date more than configured days",
      "should send email when general staff not login until reminder date",
      "should send email when general staff not login before reminder date"
    ],
    "Children": []
  },
  {
    "$id": "347",
    "FileName": "OrganizerFacts.cs",
    "Description": "organizer facts",
    "WhenList": [],
    "ThenList": [
      "should return team mailbox display name"
    ],
    "Children": []
  },
  {
    "$id": "348",
    "FileName": "ServiceEvaluationFacts.cs",
    "Description": "service evaluation facts",
    "WhenList": [],
    "ThenList": [
      "should sync date from lime survey"
    ],
    "Children": []
  },
  {
    "$id": "349",
    "FileName": "TaxReturnReportDownloadReminderJobFacts.cs",
    "Description": "tax return report download reminder job facts",
    "WhenList": [],
    "ThenList": [
      "should send request to tiger API when job execute"
    ],
    "Children": []
  },
  {
    "$id": "350",
    "FileName": "TaxReturnWorkRecordKPIFacts.cs",
    "Description": "tax return work record KPI facts",
    "WhenList": [],
    "ThenList": [
      "should call tiger api to calculate tax return frontload"
    ],
    "Children": []
  },
  {
    "$id": "351",
    "FileName": "DayInWeekToBitwiseValueConverterFact.cs",
    "Description": "day in week to bitwise value converter fact",
    "WhenList": [],
    "ThenList": [
      "should convert one day in week to bitwise",
      "should convert bitwise value to one day in week",
      "should convert bitwise value to multiple days in week",
      "should convert multiple days in week to bitwise value"
    ],
    "Children": []
  },
  {
    "$id": "352",
    "FileName": "PeriodAndTimeSlotFact.cs",
    "Description": "period and time slot fact",
    "WhenList": [],
    "ThenList": [
      "should be equal if two period have same start time and end time",
      "should create time slot",
      "should be equal if two time slot have same start time and end time",
      "should throw exception if start time is greater than end time",
      "should be equal if two period have same start time and end time and time zone",
      "should not equal if two period have same start time and end time but different time zone",
      "should equal if two period have same start time and end time based on timezone converting",
      "should convert peroid to specified timezone",
      "should return null if converting failed"
    ],
    "Children": []
  },
  {
    "$id": "353",
    "FileName": "SchedulerFacts.cs",
    "Description": "scheduler facts",
    "WhenList": [],
    "ThenList": [
      "should reject invalid time zone",
      "should ignore slots not in timezone",
      "should split time into slots",
      "should get slots which hourly resource number greater or equal than 1",
      "should get the slots which effective date is the latest one and earlier than start time",
      "should make up hourly when given time range is not falling on the hour",
      "should return 0 slots when given time range is out of available resource",
      "should only get time slots from single defined work day",
      "should only get time slots from defined work hour",
      "should only get time slots from defined work hour for two days",
      "should get time slots across weeks from single defined work day",
      "should reject if define duplicate hourly resource",
      "should reject if define work hours not in 24 hours",
      "should reject if define duplicate work days",
      "should get time slots according to scheduler time zone without dst",
      "should get time slots according to scheduler time zone with dst in summer time",
      "should get time slots according to scheduler time zone with dst in winter time",
      "should make a time slot unavailable if schedule an appointment at this time slot and resource number is one",
      "should make an time slot available if scheduled appointments at this time slot less than resource number",
      "should make an time slot unavailable if scheduled appointments at this time slot greater or equal than resource number",
      "should not available if scheduled appointment is not at work day",
      "should not available if scheduled appointment is not at work hour",
      "should not available if scheduled appointment not have resource number",
      "should not available if scheduled appointment time is occupied by others and not have resource number"
    ],
    "Children": []
  },
  {
    "$id": "354",
    "FileName": "SchedulerUnavailableDaysFacts.cs",
    "Description": "scheduler unavailable days facts",
    "WhenList": [],
    "ThenList": [
      "should check can schedule appointment when in same time zone",
      "should check can schedule appointment when in different time zone and without daylight saving",
      "should check can schedule appointment when in different time zone and with daylight saving"
    ],
    "Children": []
  },
  {
    "$id": "355",
    "FileName": "SchedulerWorkHoursFacts.cs",
    "Description": "scheduler work hours facts",
    "WhenList": [],
    "ThenList": [
      "should only get time slots from hourly resources",
      "should not get time slots when it is from hourly resources but not on work day",
      "should get time slots in user time zone when office in UTC",
      "should get time slots in user time zone when office in CST",
      "should get time slots from hourly resources of current weekly availability"
    ],
    "Children": []
  },
  {
    "$id": "356",
    "FileName": "Test1.cs",
    "Description": "test 1",
    "WhenList": [],
    "ThenList": [
      "test"
    ],
    "Children": []
  },
  {
    "$id": "357",
    "FileName": "UtilitiesUnitTests.cs",
    "Description": "utilities unit tests",
    "WhenList": [],
    "ThenList": [
      "should remove service name from uri"
    ],
    "Children": []
  },
  {
    "$id": "358",
    "FileName": "AssigneeViewModelControllerGetDetailsFacts.cs",
    "Description": "assignee view model controller get details facts",
    "WhenList": [],
    "ThenList": [
      "should return 200 OK as status code"
    ],
    "Children": []
  },
  {
    "$id": "359",
    "FileName": "FileUploadResourceControllerUnitTests.cs",
    "Description": "file upload resource controller unit tests",
    "WhenList": [],
    "ThenList": [
      "should add meaningless content for suppressing ie friendly error message feature",
      "should change media type to text when success",
      "should not add meaningless content"
    ],
    "Children": []
  },
  {
    "$id": "360",
    "FileName": "FrontDoorResourceControllerUnitTests.cs",
    "Description": "front door resource controller unit tests",
    "WhenList": [],
    "ThenList": [
      "should get resource in white list from tiger api",
      "should return forbidden status when get resource not in white list from tiger api",
      "should return forbidden for unknown resource uri",
      "should post staff register request to tiger api",
      "should return forbidden for post requests except staff"
    ],
    "Children": []
  },
  {
    "$id": "361",
    "FileName": "HealthControllerUnitTests.cs",
    "Description": "health controller unit tests",
    "WhenList": [],
    "ThenList": [
      "should return health status",
      "should return health status with invalid dependency name"
    ],
    "Children": []
  },
  {
    "$id": "362",
    "FileName": "ResourceControllerSensitiveOperationFacts.cs",
    "Description": "resource controller sensitive operation facts",
    "WhenList": [],
    "ThenList": [
      "should not forward impersonation ticket request",
      "should filter request according to white list"
    ],
    "Children": []
  },
  {
    "$id": "363",
    "FileName": "ResourceControllerUnitTests.cs",
    "Description": "resource controller unit tests",
    "WhenList": [],
    "ThenList": [
      "should get resource from tiger api",
      "should post resource to tiger api",
      "should get resource from gde service",
      "should get resource when uri is full URL",
      "should return not found for unknown resource uri",
      "should return bad request if uri is not specified",
      "should get resource from safe tiger api",
      "should not get resource from safe tiger api"
    ],
    "Children": []
  },
  {
    "$id": "364",
    "FileName": "UriPrefixExtractorUnitTests.cs",
    "Description": "uri prefix extractor unit tests",
    "WhenList": [],
    "ThenList": [
      "should get resource from tiger api",
      "should throw bad request exception when get incorrect url"
    ],
    "Children": []
  },
  {
    "$id": "365",
    "FileName": "FilePreviewResourceControllerUnitTests.cs",
    "Description": "file preview resource controller unit tests",
    "WhenList": [],
    "ThenList": [
      "should return forbidden when request is not correct",
      "should return preview when request is sent to filecabinet preview url"
    ],
    "Children": []
  },
  {
    "$id": "366",
    "FileName": "HashResourceControllerFacts.cs",
    "Description": "hash resource controller facts",
    "WhenList": [],
    "ThenList": [
      "should get myfiles entry point",
      "should decrypt and forward hashed uri",
      "should deny incorrect encrypted url",
      "should deny when user office not belongs to engagement",
      "should encrypt response",
      "should set content type to text html for uploading in ie 9"
    ],
    "Children": []
  },
  {
    "$id": "367",
    "FileName": "HealthControllerFacts.cs",
    "Description": "health controller facts",
    "WhenList": [],
    "ThenList": [
      "should return health status when checking all given all dependencies are OK"
    ],
    "Children": []
  },
  {
    "$id": "368",
    "FileName": "LinkedInResourceControllerUnitTests.cs",
    "Description": "linked in resource controller unit tests",
    "WhenList": [],
    "ThenList": [
      "should request authorize url from tiger api with state parameter",
      "should redirect to linkedin authorize url generated from tiger api",
      "should forward linkedin callback request to tiger api",
      "should redirect to my staff if tiger api returns non success code",
      "should return bad request when state in uri does not match from authorize request",
      "should return bad request when client does not request authorize url",
      "should redirect to my profile when client does not provide state",
      "should redirect to my profile when cancel authorization"
    ],
    "Children": []
  },
  {
    "$id": "369",
    "FileName": "ResourceControllerFacts.cs",
    "Description": "resource controller facts",
    "WhenList": [],
    "ThenList": [
      "should forward get request",
      "should return not found when resource not exist",
      "should return bad request when resource para is illegal",
      "should return bad request when resource",
      "should forward post request",
      "should forward put request",
      "should forward delete request",
      "should include specific reason phrase when error occured"
    ],
    "Children": [
      {
        "$id": "370",
        "FileName": "ResourceControllerFacts.cs",
        "Description": "stub resource model",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "371",
    "FileName": "SessionControllerFacts.cs",
    "Description": "session controller facts",
    "WhenList": [],
    "ThenList": [
      "should hear heart beat"
    ],
    "Children": []
  },
  {
    "$id": "372",
    "FileName": "AuthenticationHandlerFacts.cs",
    "Description": "authentication handler facts",
    "WhenList": [],
    "ThenList": [
      "should redirect to login page when user is not authenticated",
      "should not forbidden when user is authenticated",
      "should not forbidden when login",
      "should not forbidden when try logout with login",
      "should not forbidden when try logout when timeout",
      "should not forbidden request to front door when user is wif authenticated but with no tiger user in session"
    ],
    "Children": []
  },
  {
    "$id": "373",
    "FileName": "CustomJsonResponseHandlerFacts.cs",
    "Description": "custom json response handler facts",
    "WhenList": [],
    "ThenList": [
      "should prefix special characters when response is json format",
      "should not prefix special characters when response is not json format",
      "should not prefix special characters when response has no content"
    ],
    "Children": []
  },
  {
    "$id": "374",
    "FileName": "HttpMethodOverrideHandlerFacts.cs",
    "Description": "http method override handler facts",
    "WhenList": [],
    "ThenList": [
      "should override http method when specific header is provided with correct value",
      "should not override http method when specific header is provided with incorrect value",
      "should not override http method when specific header is not provided"
    ],
    "Children": []
  },
  {
    "$id": "375",
    "FileName": "LogHandlerFacts.cs",
    "Description": "log handler facts",
    "WhenList": [],
    "ThenList": [
      "should log request"
    ],
    "Children": []
  },
  {
    "$id": "376",
    "FileName": "UriHashEncryptorFacts.cs",
    "Description": "uri hash encryptor facts",
    "WhenList": [],
    "ThenList": [
      "should pass validation if hash is correct",
      "should pass validation for case insensitive authenticated uri",
      "should get null if uri or hash is missing",
      "should get null if hash is incorrect",
      "should get null if authenticated uri is empty on encryption",
      "should get null if authenticated uri is empty on decryption",
      "should contains hashed resource",
      "should encrypt href in links",
      "should decrypt encrypted json"
    ],
    "Children": []
  },
  {
    "$id": "377",
    "FileName": "ErrorHandlingFacts.cs",
    "Description": "error handling facts",
    "WhenList": [],
    "ThenList": [
      "should return not found response when destination host is not reachable"
    ],
    "Children": []
  },
  {
    "$id": "378",
    "FileName": "when_sync_box_event.cs",
    "Description": "when sync box event",
    "WhenList": [],
    "ThenList": [
      "should trigger sync upload event"
    ],
    "Children": []
  },
  {
    "$id": "379",
    "FileName": "when_trigger_send_email_to_nancy_by_day_job.cs",
    "Description": "when trigger send email to nancy by day job",
    "WhenList": [],
    "ThenList": [
      "should send emal by day"
    ],
    "Children": []
  },
  {
    "$id": "380",
    "FileName": "when_trigger_send_email_to_nancy_by_hour_job.cs",
    "Description": "when trigger send email to nancy by hour job",
    "WhenList": [],
    "ThenList": [
      "should send emal by hour"
    ],
    "Children": []
  },
  {
    "$id": "381",
    "FileName": "when_trigger_send_email_to_nancy_by_week_job.cs",
    "Description": "when trigger send email to nancy by week job",
    "WhenList": [],
    "ThenList": [
      "should send emal by week"
    ],
    "Children": []
  },
  {
    "$id": "382",
    "FileName": "AssigneeStatusChangedEventHandlerFacts.cs",
    "Description": "assignee status changed event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle assignee event",
      "should handle assignee event with 2 engagements with diffrenet application id",
      "should not handle assignee event with engagement has no nancy",
      "should not handle assignee event with engagement has no tile subscription"
    ],
    "Children": []
  },
  {
    "$id": "383",
    "FileName": "AssigneeWithEngagementEventHandlerFacts.cs",
    "Description": "assignee with engagement event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle assignee created event",
      "should trigger employee search precalculator only once when receiving 2 assignee created events for the same engagement",
      "should trigger employee search precalculator twice when receiving 2 assignee created events for 2 different engagements",
      "should not handle assignee created event when have no nancy",
      "should not handle assignee created event when tile is not subscribed"
    ],
    "Children": []
  },
  {
    "$id": "384",
    "FileName": "AuthorizationListRelatedEventHandlerFacts.cs",
    "Description": "authorization list related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle authorization list related event",
      "should not handle authorization list event when engagement not subscribe tiles"
    ],
    "Children": []
  },
  {
    "$id": "385",
    "FileName": "BriefingStatusRelatedEventHandlerFacts.cs",
    "Description": "briefing status related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle event",
      "should handle event when engagement not subscribe tiles",
      "should not precalculate when work record type is not briefing"
    ],
    "Children": []
  },
  {
    "$id": "386",
    "FileName": "ClientFileRelatedEventHandlerFacts.cs",
    "Description": "client file related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle client file related event"
    ],
    "Children": []
  },
  {
    "$id": "387",
    "FileName": "EmployerReturnRelatedEventHandlerFacts.cs",
    "Description": "employer return related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle employer return related event",
      "should not handle employer return event when engagement not subscribe tiles",
      "should not precalculate when event type is not tax"
    ],
    "Children": []
  },
  {
    "$id": "388",
    "FileName": "EngagementMyMobilityUserAddedEventHandlerFacts.cs",
    "Description": "engagement my mobility user added event handler facts",
    "WhenList": [],
    "ThenList": [
      "should calculate the my mobility user created event when engagement has no user",
      "should not calculate the my mobility user created event when the new user is a general user",
      "should not calculate the my mobility user created event when engagement have other admin user",
      "should calculate the my mobility user created event when engagement only has general user"
    ],
    "Children": []
  },
  {
    "$id": "389",
    "FileName": "EngagementTileSubscriptionsChangedEventHandlerFacts.cs",
    "Description": "engagement tile subscriptions changed event handler facts",
    "WhenList": [],
    "ThenList": [
      "should calculate engagement tile subscriptions changed event when subscriptions increased",
      "should calculate engagement tile subscriptions changed events when subscriptions increased",
      "should not calculate engagement tile subscriptions changed event when subscriptions not increased",
      "should not calculate tile subscriptions when engagement has no nancy"
    ],
    "Children": []
  },
  {
    "$id": "390",
    "FileName": "ImmigrationServiceRelatedEventHandlerFacts.cs",
    "Description": "immigration service related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle event",
      "should handle event when engagement not subscribe tiles",
      "should not precalculate when work record type is not immigration"
    ],
    "Children": []
  },
  {
    "$id": "391",
    "FileName": "ImmigrationTrackingRelatedEventHandlerFacts.cs",
    "Description": "immigration tracking related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle event",
      "should handle event when engagement not subscribe tiles",
      "should not precalculate when work record type is not immigration"
    ],
    "Children": []
  },
  {
    "$id": "392",
    "FileName": "SocialSecurityEventHandlerFacts.cs",
    "Description": "social security event handler facts",
    "WhenList": [],
    "ThenList": [
      "should trigger social security precalculator only once when receiving 2 events for the same engagement",
      "should handle event when engagement not subscribe tiles",
      "should handle event when engagement has no nancy",
      "should not precalculate when work record type is not socialsecurity"
    ],
    "Children": []
  },
  {
    "$id": "393",
    "FileName": "TaxEqualizationRelatedEventHandlerFacts.cs",
    "Description": "tax equalization related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle tax equalization related event",
      "should not handle tax equalization event when engagement not subscribe tiles",
      "should not precalculate when work record type is not tax"
    ],
    "Children": []
  },
  {
    "$id": "394",
    "FileName": "TaxReturnRelatedEventHandlerFacts.cs",
    "Description": "tax return related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should trigger tax return precalculator only once when receiving 2 events for the same engagement",
      "should trigger tax return precalculator twice when receiving 2 events for 2 different engagements",
      "should not precalculate when work record type is not tax",
      "should not call tax return precalculator when the engagement not subscribes tax return tile"
    ],
    "Children": []
  },
  {
    "$id": "395",
    "FileName": "TeqSettlementRelatedEventHandlerFacts.cs",
    "Description": "teq settlement related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle tax equalization related event",
      "should not handle teq settlement event when engagement not subscribe tiles",
      "should not precalculate when work record type is not tax"
    ],
    "Children": []
  },
  {
    "$id": "396",
    "FileName": "WorldMapRelatedEventHandlerFacts.cs",
    "Description": "world map related event handler facts",
    "WhenList": [],
    "ThenList": [
      "should handle assignee related changed event",
      "should handle work record related changed event",
      "should trigger world map precalculator when receiving one assignee with multiple engagements",
      "should trigger world map precalculator only once when receiving 2 assignees assignment changed events for the same engagement",
      "should trigger world map precalculator twice when receiving 2 assignees assignment changed events for 2 different engagements",
      "should not handle assignee assignment changed event when have no nancy",
      "should not handle assignee assignments changed event when tile is not subscribed"
    ],
    "Children": []
  },
  {
    "$id": "397",
    "FileName": "EventStoreJobFacts.cs",
    "Description": "event store job facts",
    "WhenList": [],
    "ThenList": [
      "should run event store job with 1 event",
      "should call precalculator only once when 2 assignee created events have the same engagement",
      "should call precalculator 2 times when 2 assignee created events are in 2 different pages",
      "should keep previous entry link when an entry throw an exception"
    ],
    "Children": []
  },
  {
    "$id": "398",
    "FileName": "AuthorizationListPreCalculatorFacts.cs",
    "Description": "authorization list pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache authorization list summary and recently posted data",
      "should handle tiger api return not found"
    ],
    "Children": []
  },
  {
    "$id": "399",
    "FileName": "BriefingStatusPreCalculatorFacts.cs",
    "Description": "briefing status pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache briefing status data from tiger api"
    ],
    "Children": []
  },
  {
    "$id": "400",
    "FileName": "CertificateOfCoveragePreCalculatorFacts.cs",
    "Description": "certificate of coverage pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should precalculate overview for coc"
    ],
    "Children": []
  },
  {
    "$id": "401",
    "FileName": "EmployeeSearchPreCalculatorFacts.cs",
    "Description": "employee search pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache employee count from tiger api"
    ],
    "Children": []
  },
  {
    "$id": "402",
    "FileName": "EmployerReturnPreCalculatorFacts.cs",
    "Description": "employer return pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache employer return summary"
    ],
    "Children": []
  },
  {
    "$id": "403",
    "FileName": "FileSharingPreCalculatorFacts.cs",
    "Description": "file sharing pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should pre calculator recent created files if engagement use new file sharing"
    ],
    "Children": []
  },
  {
    "$id": "404",
    "FileName": "ImmigrationServicePreCalculatorFacts.cs",
    "Description": "immigration services pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache immigration services data from tiger api"
    ],
    "Children": []
  },
  {
    "$id": "405",
    "FileName": "ImmigrationTrackingPreCalculatorFacts.cs",
    "Description": "immigration tracking pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache immigration tracking data from tiger api"
    ],
    "Children": []
  },
  {
    "$id": "406",
    "FileName": "MyPublicationEvaluationPreCalculatorFacts.cs",
    "Description": "my publication evaluation pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache latest 2 items for publication"
    ],
    "Children": []
  },
  {
    "$id": "407",
    "FileName": "OverviewConsumeQueueJobFacts.cs",
    "Description": "overview consume queue job facts",
    "WhenList": [],
    "ThenList": [
      "should consume items from queue with known dynamic tiles"
    ],
    "Children": []
  },
  {
    "$id": "408",
    "FileName": "OverviewPushToQueueJobFacts.cs",
    "Description": "overview push to queue job facts",
    "WhenList": [],
    "ThenList": [
      "should push items to queue with known dynamic tiles"
    ],
    "Children": []
  },
  {
    "$id": "409",
    "FileName": "ServiceEvaluationPreCalculateFacts.cs",
    "Description": "service evaluation pre calculate facts",
    "WhenList": [],
    "ThenList": [
      "should get service evaluation overview info from tiger"
    ],
    "Children": []
  },
  {
    "$id": "410",
    "FileName": "SocialSecurityPreCalculatorFacts.cs",
    "Description": "social security pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache social security data from tiger api"
    ],
    "Children": []
  },
  {
    "$id": "411",
    "FileName": "TaxEqualizationPreCalculatorFacts.cs",
    "Description": "tax equalization pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache tax equalization summary and recently posted data"
    ],
    "Children": []
  },
  {
    "$id": "412",
    "FileName": "TaxReturnPreCalculatorFacts.cs",
    "Description": "tax return pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache tax return summary and recently posted data"
    ],
    "Children": []
  },
  {
    "$id": "413",
    "FileName": "TeqSettlementPreCalculatorFacts.cs",
    "Description": "teq settlement pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache teq settlement summary and recently posted data"
    ],
    "Children": []
  },
  {
    "$id": "414",
    "FileName": "TilePreCalculatorFinderFacts.cs",
    "Description": "tile pre calculator finder facts",
    "WhenList": [],
    "ThenList": [
      "should find the precalculator by application id",
      "should thorw exception if application is not registerred"
    ],
    "Children": []
  },
  {
    "$id": "415",
    "FileName": "WebcastsPreCalculatorFacts.cs",
    "Description": "webcasts pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache latest webcasts for tile overview"
    ],
    "Children": []
  },
  {
    "$id": "416",
    "FileName": "WorldMapPreCalculatorFacts.cs",
    "Description": "world map pre calculator facts",
    "WhenList": [],
    "ThenList": [
      "should cache world map data from tiger api"
    ],
    "Children": []
  },
  {
    "$id": "417",
    "FileName": "MyMobilityUserMigrateEventFacts.cs",
    "Description": "my mobility user migrate event facts",
    "WhenList": [],
    "ThenList": [
      "should create stream when migrate rebecca who is not existed in event store",
      "should append to stream when migrate rebecca who is existed in event store",
      "should raise event with correct type"
    ],
    "Children": []
  },
  {
    "$id": "418",
    "FileName": "IASPlatformAsConsumerPactTest.cs",
    "Description": "IAS platform as consumer pact test",
    "WhenList": [],
    "ThenList": [
      "file sharing should return correct toggle"
    ],
    "Children": []
  },
  {
    "$id": "419",
    "FileName": "EmailTemplateSettingsPactTest.cs",
    "Description": "email template settings pact test",
    "WhenList": [],
    "ThenList": [
      "should verify email template settings contract tests"
    ],
    "Children": []
  },
  {
    "$id": "420",
    "FileName": "ManageMyMobilityPactTest.cs",
    "Description": "manage my mobility pact test",
    "WhenList": [],
    "ThenList": [
      "should verify user contract tests with manage mymobility"
    ],
    "Children": []
  },
  {
    "$id": "421",
    "FileName": "ServiceInitiationSmartTileOverviewUpdatePactTest.cs",
    "Description": "service initiation smart tile overview update pact test",
    "WhenList": [],
    "ThenList": [
      "should verify user contract tests with manage mymobility"
    ],
    "Children": []
  },
  {
    "$id": "422",
    "FileName": "WorldMapPactTest.cs",
    "Description": "world map pact test",
    "WhenList": [],
    "ThenList": [
      "should verify world map contract tests"
    ],
    "Children": []
  },
  {
    "$id": "423",
    "FileName": "FileSharingPactTest.cs",
    "Description": "file sharing pact test",
    "WhenList": [],
    "ThenList": [
      "should list folders according to engagement uri",
      "should get is new client file sharing"
    ],
    "Children": []
  },
  {
    "$id": "424",
    "FileName": "MyMobilityAuthorizationListPactTest.cs",
    "Description": "my mobility authorization list pact test",
    "WhenList": [],
    "ThenList": [
      "should verify authorization list access api from tiger"
    ],
    "Children": []
  },
  {
    "$id": "425",
    "FileName": "MyMobilityServiceInitiationPactTest.cs",
    "Description": "my mobility service initiation pact test",
    "WhenList": [],
    "ThenList": [
      "should verify service initiation settings api from tiger"
    ],
    "Children": []
  },
  {
    "$id": "426",
    "FileName": "MyMobilityUserPactTest.cs",
    "Description": "my mobility user pact test",
    "WhenList": [],
    "ThenList": [
      "should verify user contract tests with tiger api",
      "should verify user contract tests with ias mobility api"
    ],
    "Children": []
  },
  {
    "$id": "427",
    "FileName": "AddEngagementUserFacts.cs",
    "Description": "add engagement user facts",
    "WhenList": [],
    "ThenList": [
      "should raise engagement mymobility user added event when add a new user",
      "should raise engagement mymobility user added event when add a existing user"
    ],
    "Children": []
  },
  {
    "$id": "428",
    "FileName": "AddExistedUserFacts.cs",
    "Description": "add existed user facts",
    "WhenList": [],
    "ThenList": [
      "add existed nancy",
      "add existed rebecca"
    ],
    "Children": []
  },
  {
    "$id": "429",
    "FileName": "CreatemyMobilityUserFacts.cs",
    "Description": "create my mobility user facts",
    "WhenList": [],
    "ThenList": [
      "should save nancy into eventstore",
      "should save modifier info into event store",
      "should save rebecaa into eventstore"
    ],
    "Children": []
  },
  {
    "$id": "430",
    "FileName": "DeleteMyMobilityUserFacts.cs",
    "Description": "delete my mobility user facts",
    "WhenList": [],
    "ThenList": [
      "should raise related events when nancy inactive rebecca",
      "should remove subscriptions when dissociate engagement",
      "should only raise dissociate event not delete user event when user associate with another engagement"
    ],
    "Children": []
  },
  {
    "$id": "431",
    "FileName": "SourcingApiFacts.cs",
    "Description": "sourcing api facts",
    "WhenList": [],
    "ThenList": [
      "should get sourced tiles engagement"
    ],
    "Children": []
  },
  {
    "$id": "432",
    "FileName": "TilesEngagementFacts.cs",
    "Description": "tiles engagement facts",
    "WhenList": [],
    "ThenList": [
      "should raise engagement tile subscriptions changed event when event is not existed",
      "should not raise engagement tile subscriptions changed event when tiles not changed",
      "should raise engagement tile subscriptions changed event when event already exists",
      "should skip mymobility and mymobility managed and not raise event when tiles not changed",
      "should not raise engagement tile subscriptions changed event when upgrade to new file sharing and not subscribe old file sharing"
    ],
    "Children": []
  },
  {
    "$id": "433",
    "FileName": "UpdateEngagmentTileSubscriptionFacts.cs",
    "Description": "update engagment tile subscription facts",
    "WhenList": [],
    "ThenList": [
      "should update my mobility user tile subscription into eventstore when subscribe",
      "should update my mobility user tile subscription into eventstore when unsubscribe"
    ],
    "Children": []
  },
  {
    "$id": "434",
    "FileName": "when_get_item_upload_event_from_box.cs",
    "Description": "when get item upload event from box",
    "WhenList": [],
    "ThenList": [
      "should get upload file events from box and save them in db",
      "should sync folder id path from box",
      "should sync events from position last time sync final position",
      "should only take care of item upload event",
      "should start another sync when chunk size is 100",
      "should concat the whole path",
      "should rollback if next stream position cannot be stored",
      "should skip duplicate events"
    ],
    "Children": []
  },
  {
    "$id": "435",
    "FileName": "when_get_notification_settings.cs",
    "Description": "when get notification settings",
    "WhenList": [],
    "ThenList": [
      "should get nancy notification settings"
    ],
    "Children": []
  },
  {
    "$id": "436",
    "FileName": "when_send_email_after_nancy_changed_her_settings.cs",
    "Description": "when send email after nancy changed her settings",
    "WhenList": [],
    "ThenList": [
      "should send email with files from last week when nancy set email frequency from weekly to hourly",
      "should only send events produced after nancy turned on her notification",
      "should not update email history after nancy turned on her notification when there was no new upload event"
    ],
    "Children": []
  },
  {
    "$id": "437",
    "FileName": "when_send_email_by_day.cs",
    "Description": "when send email by day",
    "WhenList": [],
    "ThenList": [
      "should send email when nancy set frequency as daily",
      "should not send email when nancy set email frequency as hourly"
    ],
    "Children": []
  },
  {
    "$id": "438",
    "FileName": "when_send_email_by_hour.cs",
    "Description": "when send email by hour",
    "WhenList": [],
    "ThenList": [
      "should insert history when it is first time send email to nancy",
      "should send out email to nancy from where last time stops",
      "should send out email include all the events to nancy",
      "should send email according to nancys own history",
      "should send email to nancy without her item upload event",
      "should send email notification to rebecca when sofia upload files to folder with permission setup",
      "should send email to rebecca when the permissioned folder does not sync folder collaboration before",
      "should not send email to rebecca when we can not get any folder collaborations",
      "should not send email notification to rebecca when sofia upload files without permission set up",
      "should send out email only to nancy",
      "should not send email when nancy has received all events",
      "should not throw exception when there is no new nancy added",
      "should not throw exception when my mobility user who has email has been deleted",
      "should not throw duplicated key exception when initiate email history and there are no newly events",
      "should not send email and not insert history when nancy turn off filesharing notification",
      "should not send email when nancy set frequency as daily"
    ],
    "Children": []
  },
  {
    "$id": "439",
    "FileName": "when_send_email_by_week.cs",
    "Description": "when send email by week",
    "WhenList": [],
    "ThenList": [
      "should send email when nancy set frequency as weekly"
    ],
    "Children": []
  },
  {
    "$id": "440",
    "FileName": "when_send_email_to_pwc_by_hour.cs",
    "Description": "when send email to pwc by hour",
    "WhenList": [],
    "ThenList": [
      "should insert history when it is first time send email",
      "should send out email from where last time stops",
      "should send out emails for different engagements"
    ],
    "Children": []
  },
  {
    "$id": "441",
    "FileName": "when_update_notification_settings.cs",
    "Description": "when update notification settings",
    "WhenList": [],
    "ThenList": [
      "should turn on nancy notification settings",
      "should turn off and set email frequency to weekly nancy notification settings"
    ],
    "Children": []
  },
  {
    "$id": "442",
    "FileName": "FileSharingFact.cs",
    "Description": "file sharing facts",
    "WhenList": [],
    "ThenList": [
      "should return unauthorized when machine account has not logged in",
      "should get folder according to engagement uri when user already exists and is added as collaborator",
      "should create engagement folder when it does not exist",
      "should refresh token when token is invalid",
      "should return internal server error when create folder failed but token is still valid",
      "should create account for sofia when she first time logged in",
      "should get folders structure without folder more than 10 levels deep",
      "should create engagement folder if it does not exist when getting folders structure",
      "should not create collaborator if the user email is not associated with the engagement",
      "should not create collaborations if a folder id does not belong to the engagement folder tree and remove filesharing subscription",
      "should not create collaborations and remove filesharing subscription if machine account has not logged in",
      "should create rebecca box account with the given folder access",
      "should create user box account if check file sharing for the firsttime during edit",
      "should not send request to box to get all folder accesses when view nancy info",
      "should send request to box to get all folder accesses for nancy when parameter load admin folders is true",
      "should get folder access for rebecca",
      "should not update nancy file sharing access when edit her profile",
      "should update rebecca file sharing access when file tree has only one folder"
    ],
    "Children": []
  },
  {
    "$id": "443",
    "FileName": "when_update_user_who_associated_with_several_engagements.cs",
    "Description": "when update user who associated with several engagements",
    "WhenList": [],
    "ThenList": [
      "should remove box association if file sharing is unscribed and other engagements has file sharing subscription",
      "should remove box account if file sharing is unscribed and other engagements has no file sharing subscription"
    ],
    "Children": []
  },
  {
    "$id": "444",
    "FileName": "when_update_user_who_only_is_associated_to_one_engagement.cs",
    "Description": "when update user who only is associated to one engagement",
    "WhenList": [],
    "ThenList": [
      "should remove box account when user subscribed to filesharing but unsubsribed now",
      "should not remove box account when there is file sharing subscription"
    ],
    "Children": []
  },
  {
    "$id": "445",
    "FileName": "ConsumeQueueFacts.cs",
    "Description": "consume queue facts",
    "WhenList": [],
    "ThenList": [
      "should get queue without request count",
      "should get queue with request count",
      "should remove queue from list if exists"
    ],
    "Children": []
  },
  {
    "$id": "446",
    "FileName": "CreateTaxStatusOverviewFacts.cs",
    "Description": "create tax status overview facts",
    "WhenList": [],
    "ThenList": [
      "should create overview for tax return tile"
    ],
    "Children": []
  },
  {
    "$id": "447",
    "FileName": "CreateTileOverviewModuleFacts.cs",
    "Description": "create tile overview module facts",
    "WhenList": [],
    "ThenList": [
      "should create engagement overview if not exist",
      "should not clear overview data of other tile",
      "should clear legacy overview if exist",
      "should clear recent item for service initiation",
      "should create tile overview for file sharing",
      "should clear cached recent files for file sharing",
      "should create tile overview for service initiation",
      "should create tile overview for world map",
      "should clean up tile overview for world map when create if exist",
      "should clean annual association and recent items for tax equalization",
      "should create tile overview for tax equalization"
    ],
    "Children": []
  },
  {
    "$id": "448",
    "FileName": "GetFileSharingOverviewFacts.cs",
    "Description": "get file sharing overview facts",
    "WhenList": [],
    "ThenList": [
      "should get latest 2 files if nancy has multiple engagement subscriptions",
      "should show tile overview if engagement use new file sharing",
      "should only show static tile if engagement still use box to share file",
      "should not show new file sharing if there is no cached data"
    ],
    "Children": []
  },
  {
    "$id": "449",
    "FileName": "GetTileOverviewFacts.cs",
    "Description": "get tile overview facts",
    "WhenList": [],
    "ThenList": [
      "should get tile overviews for nancy",
      "should filter out tile overviews which are unsubscribed from engagement",
      "should filter out tile overviews which are unsubscribed for rebecca",
      "should get tile overview for coc",
      "shold get tile overview for employee search",
      "shold get tile overview for world map",
      "shold get tile overview for my publication",
      "should get service initiation overview",
      "should be default value if key is not cached",
      "should get tile overview for tax equalization settlement",
      "should get tile overview for employer return",
      "should get tile overview for tax equalization",
      "should have no webcasts if no data cached",
      "should get tile overview for webcasts",
      "should get overview for service evaluation",
      "should get overview for briefing status",
      "should get overview for immigration services",
      "should get overview for social security",
      "should get overview for immigration tracking",
      "overrall rating should be 0 if there is no answer",
      "should get tile overview for tax status"
    ],
    "Children": []
  },
  {
    "$id": "450",
    "FileName": "PushToQueueFacts.cs",
    "Description": "push to queue facts",
    "WhenList": [],
    "ThenList": [
      "should only put dynamic tiles into queue",
      "when only one engagement",
      "should skip if item exist in queue",
      "when there are multiple engagements",
      "should not add to queue when engagement has no admin"
    ],
    "Children": []
  },
  {
    "$id": "451",
    "FileName": "PwCCollectorProxyModuleFacts.cs",
    "Description": "pw c collector proxy module facts",
    "WhenList": [],
    "ThenList": [
      "should get my publication from pwc collector service",
      "should get webcast from pwc collector service"
    ],
    "Children": []
  },
  {
    "$id": "452",
    "FileName": "TileOverviewCreatorRunnerFacts.cs",
    "Description": "tile overview creator runner facts",
    "WhenList": [],
    "ThenList": [
      "shold clear all staled tile overview",
      "should not throw exception if there is no overview item to cleanup"
    ],
    "Children": []
  },
  {
    "$id": "453",
    "FileName": "AuthorizationListAccessFacts.cs",
    "Description": "authorization list access facts",
    "WhenList": [],
    "ThenList": [
      "should get user accesses by authorization list id",
      "should update user accesses",
      "should subscripe auth list tile when update user accesses if rebeccal not subscripe",
      "should get user accesses by email when current user is admin",
      "should get user accesses by email when current user is general user",
      "should get user accesses by email when engagement has no access for admin",
      "should get user accesses by email when engagement not subscribe tile"
    ],
    "Children": []
  },
  {
    "$id": "454",
    "FileName": "BoxAPIServiceProviderFacts.cs",
    "Description": "box API service provider facts",
    "WhenList": [],
    "ThenList": [
      "should remove rebecca box account",
      "should remove rebecca box collaboration"
    ],
    "Children": []
  },
  {
    "$id": "455",
    "FileName": "BoxEmailLoginFacts.cs",
    "Description": "box email login facts",
    "WhenList": [],
    "ThenList": [
      "should not add environment specifier when empty",
      "should add environment specifier when needed"
    ],
    "Children": []
  },
  {
    "$id": "456",
    "FileName": "CustomFieldFilterModuleFacts.cs",
    "Description": "custom field filter module facts",
    "WhenList": [],
    "ThenList": [
      "should return rebecca custom filter",
      "should return rebecca custom filter with multiple engagement",
      "should delete custom field fiter option",
      "should check whether exist filter base on custom field",
      "should delete all filter base on custom field",
      "should delete all filter base on custom field for one engagement"
    ],
    "Children": []
  },
  {
    "$id": "457",
    "FileName": "EmailTemplateModuleFact.cs",
    "Description": "email template module fact",
    "WhenList": [],
    "ThenList": [
      "should save a new email template and return the created template data",
      "should return forbidden when create new email template if not subscribed",
      "should save a new email template if template is empty",
      "should not save email template if category is empty",
      "should not save email template if template name is empty",
      "should not save email template if template name length is more than 255 characters",
      "should not save email template if email subject length is more than 255 characters",
      "should not save email template if modified by is empty",
      "should not save email template if category is unknown",
      "should get a list of email templates for nancy",
      "should get a list of email templates for rebecca",
      "should not return missing info section when has no subscription of tax return",
      "should not return questionnaire status section when has no subscription of tax return",
      "should not return teq settlement section when not subscribe teq settlement tile",
      "should update email template for nancy",
      "should return not found when update email template and template not existed",
      "should return forbidden when update email template and user not subscribed tile",
      "should return forbidden when update email template and user in other client",
      "should return forbidden when update email template and email template category not same",
      "should return bad request when update email template and email template name is empty",
      "should return not found if trying to delete not exsit email template",
      "should return forbidden if trying to delete category that not susbcribed",
      "should return forbidden if trying to delete email template and user in other client"
    ],
    "Children": []
  },
  {
    "$id": "458",
    "FileName": "EngagementFacts.cs",
    "Description": "engagement facts",
    "WhenList": [],
    "ThenList": [
      "should clear all tile subscriptions and all user associations when inactivate engagement"
    ],
    "Children": []
  },
  {
    "$id": "459",
    "FileName": "ExternalResourceModuleFacts.cs",
    "Description": "external resource module facts",
    "WhenList": [],
    "ThenList": [
      "should clear current external resource for tiles",
      "should create external resource for tiles"
    ],
    "Children": []
  },
  {
    "$id": "460",
    "FileName": "MyMobilityRebeccaUserFacts.cs",
    "Description": "my mobility rebecca user facts",
    "WhenList": [],
    "ThenList": [
      "should create rebecca with her first engagement association and custom field filters",
      "should associate rebecca to hastings immigration",
      "should return engagement and subscriptions for rebecca",
      "should update rebecca basic information",
      "should update rebecca tile subscription information",
      "should update rebecca custom field filters",
      "should add rebecca custom field filters when rebecca not have custom field filters",
      "should create rebecca with custom filter",
      "should not update rebecca tile subscriptions if tile is not subscribed to the engagement",
      "should update rebecca non tile subscription",
      "should delete related tile subscriptions when delete rebecca",
      "should delete auth list access data when delete rebecca"
    ],
    "Children": []
  },
  {
    "$id": "461",
    "FileName": "MyMobilityUserFacts.cs",
    "Description": "my mobility user facts",
    "WhenList": [],
    "ThenList": [
      "should get represent by engagement id",
      "should get user email engagement mapping by engagement ids",
      "should add nancy with her first engagement association",
      "should add filesharing notification default settings for new nancy",
      "should not throw exception when reactive my mobility user",
      "should add filesharing notification email history for new nancy",
      "should not add when nancy already exists",
      "should not add when nancy email postfix all matched in block filter string",
      "should not add when nancy firstname or lastname is shorter than 2 characters",
      "should not add when nancy user email has bad format",
      "should list nancy by engagement",
      "should return engagement and subscriptions for nancy by userid",
      "should return not found when user id not existed and find user by id",
      "should return not found when engagement association not existed and find user by id",
      "should return engagement and subscriptions for nancy",
      "should return can manage email template settings for nancy",
      "should return engagement uris for nancy",
      "should return not found if no email matched",
      "should return only the requested user engagements and subscriptions",
      "should return users infos for nancy",
      "should return existed users info",
      "should return user detail by email",
      "should return user world map setting by email",
      "should associate nancy to hastings immigration",
      "should remove association between nancy and hastings immigration",
      "should remove nancy when nancy has no association with other engagements",
      "should remove file sharing notfication setting when remove nancy",
      "should remove nancy box account when remove nancy and nancy has no other engagement association but has subscribed box before",
      "should not remove nancy box account when remove nancy but nancy is not subscribed to file sharing",
      "should remove nancy collaboration in box when remove nancy and nancy has other engagement association and subscribed box before",
      "should remove nancy box account when nancy has other engagement which has not subscribed file sharing",
      "should not remove mymobility tile subscription when engagement has no nancy",
      "should add default subscriptions when first adding association between nancy and the engagement",
      "should add default subscriptions for nancy even after rebecca user is associated to mymobility",
      "should not add subscription to mymobility when not first time adding association for the engagement",
      "should return bad request if email is malformed",
      "should return bad request if role is undefined",
      "should not associate a user to an engagement twice",
      "should update nancy basic information",
      "should not update nancy firstname or lastname if shorter than 2 characters",
      "should patch update nancy information",
      "should update nancy last viewed world map",
      "should return all nancy subscript engagement user infos for nancy",
      "should return forbidden when get user list for rebecca",
      "should return not found if engagement has no associated nancy",
      "should inactivate rebecca when nancy has the same engagements",
      "should return nancy tiles engagement ids"
    ],
    "Children": []
  },
  {
    "$id": "462",
    "FileName": "NewClientFileSharingFacts.cs",
    "Description": "new client file sharing facts",
    "WhenList": [],
    "ThenList": [
      "should upgrade old file sharing to new file sharing tile and remove box account",
      "should forbid when no old file sharing subscription",
      "should remove box collaborations when has other engagements associated to filesharing",
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "463",
    "FileName": "ServiceInitiationFacts.cs",
    "Description": "service initiation facts",
    "WhenList": [],
    "ThenList": [
      "should get default mandatory fields",
      "should get custom mandatory fields and instruction texts for engagement",
      "should save mandatory fields",
      "should save instruction texts"
    ],
    "Children": []
  },
  {
    "$id": "464",
    "FileName": "TileFacts.cs",
    "Description": "tile facts",
    "WhenList": [],
    "ThenList": [
      "should return tile settings",
      "should list tiles by practice type",
      "should setup tile subscriptions to engagement for nancy",
      "should setup tile subscriptions to engagement for rebecca",
      "should unsubscribe rebecca subscriptions when unsubscribe engagement",
      "should not setup tile subscriptions to engagement when user email is invalid",
      "should clear subscriptions to engagement before adding new ones",
      "should get an engagements subscribed tiles",
      "should not change subscriptions if invalid tile id is sent",
      "should remove engagement box account and mymobility user box account when unsubscribe file sharing tile",
      "should not call box api when unsubscribe file sharing tile while use new client file sharing",
      "should only remove collaboration when nancy or rebecca associates other engagement which is subscribed to file sharing",
      "should get an engagement subscribed tiles with settings",
      "should update an engagement subscribed tiles with settings",
      "should get tiles subscriptions by engagement ids",
      "should get tiles subscriptions by multiple engagement ids",
      "should get tiles subscriptions when multiple engagement urls have same id"
    ],
    "Children": []
  },
  {
    "$id": "465",
    "FileName": "TileFeedTimeFacts.cs",
    "Description": "tile feed time facts",
    "WhenList": [],
    "ThenList": [
      "should get smart tile feed record",
      "should save smart tile feed record when link not exist",
      "should update smart tile feed record when link exist"
    ],
    "Children": []
  },
  {
    "$id": "466",
    "FileName": "UserEmailBlockListFacts.cs",
    "Description": "user email block list facts",
    "WhenList": [],
    "ThenList": [
      "should blocked when user email domain all matched in filter string",
      "should blocked when user email domain first part matched in filter string",
      "should not blocked when user email domain not matched in filter string"
    ],
    "Children": []
  },
  {
    "$id": "467",
    "FileName": "UserFacts.cs",
    "Description": "user facts",
    "WhenList": [],
    "ThenList": [
      "should return user info for nacy",
      "should return user info for rebecca",
      "should not have access when engagement subscription does not exist"
    ],
    "Children": []
  },
  {
    "$id": "468",
    "FileName": "EmailNotificationSettingsFact.cs",
    "Description": "email notification settings fact",
    "WhenList": [],
    "ThenList": [
      "should return ok when nancy turn on her email notification toggle and set email frequency to weekly",
      "should return nancy email notification settings",
      "should return default notification settings when nancy has no settings"
    ],
    "Children": []
  },
  {
    "$id": "469",
    "FileName": "FileSharingFacts.cs",
    "Description": "file sharing facts",
    "WhenList": [],
    "ThenList": [
      "when nancy login file sharing for the firsttime engagement folder should be created",
      "when rebecca login should not assignee her access to engagement folder",
      "should return not subscribed view when nancy is not subscribed to filesharing"
    ],
    "Children": []
  },
  {
    "$id": "470",
    "FileName": "GetSubscriptionsFacts.cs",
    "Description": "get subscriptions facts",
    "WhenList": [],
    "ThenList": [
      "should return user subscriptions",
      "should not be able to access some tile when impersonating",
      "should return user subscriptions accroding to practice type of impersonating sofia"
    ],
    "Children": [
      {
        "$id": "471",
        "FileName": "GetSubscriptionsFacts.cs",
        "Description": "subscriptions dto",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "472",
    "FileName": "GetUserProfileFacts.cs",
    "Description": "get user profile facts",
    "WhenList": [],
    "ThenList": [
      "should get user name from database instead of claim"
    ],
    "Children": []
  },
  {
    "$id": "473",
    "FileName": "AuthorizationListControllerFacts.cs",
    "Description": "authorization list controller facts",
    "WhenList": [],
    "ThenList": [
      "should get authorization lists by engagement ids",
      "should get authorization list by id",
      "should update authorization list items"
    ],
    "Children": []
  },
  {
    "$id": "474",
    "FileName": "BriefingStatusControllerContractTestFacts.cs",
    "Description": "briefing status controller contract test facts",
    "WhenList": [],
    "ThenList": [
      "should get briefing status summary by country for nancy",
      "should get briefing details for nancy",
      "should get briefing countries"
    ],
    "Children": []
  },
  {
    "$id": "475",
    "FileName": "BriefingStatusControllerFacts.cs",
    "Description": "briefing status controller facts",
    "WhenList": [],
    "ThenList": [
      "should get briefing status summary by country for nancy"
    ],
    "Children": []
  },
  {
    "$id": "476",
    "FileName": "CoCDetailFacts.cs",
    "Description": "co c detail facts",
    "WhenList": [],
    "ThenList": [
      "should return co c details by all countries and lt 30 days to expire",
      "show return co c details by country and all valid expery types",
      "should save deny extension for workrecord",
      "should get conflict if workrecord id already existed"
    ],
    "Children": []
  },
  {
    "$id": "477",
    "FileName": "CoCSummaryFacts.cs",
    "Description": "co c summary facts",
    "WhenList": [],
    "ThenList": [
      "should return co c summary groupby country",
      "should filter out record which value is all 0"
    ],
    "Children": []
  },
  {
    "$id": "478",
    "FileName": "ExtendEndDateFacts.cs",
    "Description": "extend end date facts",
    "WhenList": [],
    "ThenList": [
      "should extend expected end date",
      "should not extend expected end date in tiger but send email when no assignment get",
      "should not extend expected end date when nancy has no relationship with kayla",
      "should not extend expected end date when date is earlier than today"
    ],
    "Children": []
  },
  {
    "$id": "479",
    "FileName": "HashResourceFacts.cs",
    "Description": "hash resource facts",
    "WhenList": [],
    "ThenList": [
      "should return file sharing entry"
    ],
    "Children": []
  },
  {
    "$id": "480",
    "FileName": "EmployerReturnControllerContractTestFacts.cs",
    "Description": "employer return controller contract test facts",
    "WhenList": [],
    "ThenList": [
      "should be able to get employer return list",
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "481",
    "FileName": "UpdateEmployerReturnStatusFacts.cs",
    "Description": "update employer return status facts",
    "WhenList": [],
    "ThenList": [
      "should update employer return status"
    ],
    "Children": []
  },
  {
    "$id": "482",
    "FileName": "EmployerReturnControllerFacts.cs",
    "Description": "employer return controller facts",
    "WhenList": [],
    "ThenList": [],
    "Children": [
      {
        "$id": "483",
        "FileName": "EmployerReturnControllerFacts.cs",
        "Description": "get employer return facts",
        "WhenList": [],
        "ThenList": [
          "should return employer return as expected",
          "should return forbidden when tiger service throws forbid exception"
        ],
        "Children": []
      },
      {
        "$id": "484",
        "FileName": "EmployerReturnControllerFacts.cs",
        "Description": "update employer return status facts",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "485",
    "FileName": "FilesControllerFacts.cs",
    "Description": "files controller facts",
    "WhenList": [],
    "ThenList": [
      "should redict to error page when tiger api return forbidden",
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "486",
    "FileName": "LongArrayModelBinderFacts.cs",
    "Description": "long array model binder facts",
    "WhenList": [],
    "ThenList": [
      "should return null",
      "should parse successfully"
    ],
    "Children": []
  },
  {
    "$id": "487",
    "FileName": "FileServiceFacts.cs",
    "Description": "file service facts",
    "WhenList": [],
    "ThenList": [
      "should download batch files",
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "488",
    "FileName": "MissingInformationContractTest.cs",
    "Description": "missing information contract test",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "489",
    "FileName": "ImmigrationServicesControllerFacts.cs",
    "Description": "immigration services controller facts",
    "WhenList": [],
    "ThenList": [
      "should get immigration work records for nancy",
      "should not get immigration work records when engagement not subscribe immigration services",
      "should not get immigration service when engagement not subscribe immigration services",
      "should not get immigration service when user not subscribe any engagements",
      "should return forbidden when end date or start date or status is invalid",
      "should get immigration services",
      "should get immigration service when apply denied status",
      "should get immigration work records by id"
    ],
    "Children": []
  },
  {
    "$id": "490",
    "FileName": "MissingInformationControllerFacts.cs",
    "Description": "missing information controller facts",
    "WhenList": [],
    "ThenList": [
      "should show index page when can access",
      "should show error page when can not access",
      "should get immigration missing information"
    ],
    "Children": []
  },
  {
    "$id": "491",
    "FileName": "ImmigrationTrackingContractTest.cs",
    "Description": "immigration tracking contract test",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "492",
    "FileName": "ImmigrationTrackingControllerFacts.cs",
    "Description": "immigration tracking controller facts",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "493",
    "FileName": "ImmigrationTrackingDownloadFacts.cs",
    "Description": "immigration tracking download facts",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "494",
    "FileName": "ImmigrationTrackingSummaryFacts.cs",
    "Description": "immigration tracking summary facts",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "495",
    "FileName": "FileSharingFacts.cs",
    "Description": "file sharing facts",
    "WhenList": [],
    "ThenList": [
      "mock platform api get is new client file sharing"
    ],
    "Children": []
  },
  {
    "$id": "496",
    "FileName": "MyMobilityUserFacts.cs",
    "Description": "my mobility user facts",
    "WhenList": [],
    "ThenList": [
      "mock platform api get my mobility user model"
    ],
    "Children": []
  },
  {
    "$id": "497",
    "FileName": "MyTeamFacts.cs",
    "Description": "my team facts",
    "WhenList": [],
    "ThenList": [
      "mock tiger get my team API"
    ],
    "Children": []
  },
  {
    "$id": "498",
    "FileName": "EmployeeListConsumerFacts.cs",
    "Description": "employee list consumer facts",
    "WhenList": [],
    "ThenList": [
      "mock get employee list"
    ],
    "Children": []
  },
  {
    "$id": "499",
    "FileName": "UpdateEmployeeAssignmentsConsumerFacts.cs",
    "Description": "update employee assignments consumer facts",
    "WhenList": [],
    "ThenList": [
      "mock tiger update assignments"
    ],
    "Children": []
  },
  {
    "$id": "500",
    "FileName": "UpdateEmployeeCustomFieldsValueConsumerFacts.cs",
    "Description": "update employee custom fields value consumer facts",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "501",
    "FileName": "EmailTemplateSettingsControllerFacts.cs",
    "Description": "email template settings controller facts",
    "WhenList": [],
    "ThenList": [
      "get user infor",
      "should return forbidden when sofia impersonate nancy to delete email template"
    ],
    "Children": []
  },
  {
    "$id": "502",
    "FileName": "EmailTemplateSettingsControllerPact.cs",
    "Description": "email template settings controller pact",
    "WhenList": [],
    "ThenList": [
      "should get email templates",
      "get user infor",
      "should delete email templates"
    ],
    "Children": []
  },
  {
    "$id": "503",
    "FileName": "ManageMyMobilityControllerFacts.cs",
    "Description": "manage my mobility controller facts",
    "WhenList": [],
    "ThenList": [
      "should return forbidden when a general user tries to create a new user",
      "should return forbidden when creating a new user in an engagement not belonging to nancy",
      "should return forbidden when creating a new user and get current user info fails",
      "should return bad request when creating a new user and try get new user info fails",
      "should return conflict when creating again an existing engagement association",
      "should return forbidden when creating an existing rebecca in other client",
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "504",
    "FileName": "ManageMyMobilityControllerPact.cs",
    "Description": "manage my mobility controller pact",
    "WhenList": [],
    "ThenList": [
      "should get user list for nancy",
      "should blocked when email postfix matched in block filter string",
      "should get user info",
      "should get programs info by nancy email",
      "should inactivate rebecca by nanacy",
      "should return true if tiger staff is existing",
      "should return false if tiger staff is not existing"
    ],
    "Children": []
  },
  {
    "$id": "505",
    "FileName": "MissingInfoConsumerFacts.cs",
    "Description": "missing info consumer facts",
    "WhenList": [],
    "ThenList": [
      "should send request to get missing info email template"
    ],
    "Children": []
  },
  {
    "$id": "506",
    "FileName": "MyPopulationConsumerFacts.cs",
    "Description": "my population consumer facts",
    "WhenList": [],
    "ThenList": [
      "should send request to get my population"
    ],
    "Children": []
  },
  {
    "$id": "507",
    "FileName": "TaxEqualizationConsumerFacts.cs",
    "Description": "tax equalization consumer facts",
    "WhenList": [],
    "ThenList": [
      "mock my mobility user get engagement ids"
    ],
    "Children": []
  },
  {
    "$id": "508",
    "FileName": "TaxEqualizationDownloadExcelFacts.cs",
    "Description": "tax equalization download excel facts",
    "WhenList": [],
    "ThenList": [
      "mock my mobility user without engagement ids"
    ],
    "Children": []
  },
  {
    "$id": "509",
    "FileName": "TaxEqualizationDownloadFacts.cs",
    "Description": "tax equalization download facts",
    "WhenList": [],
    "ThenList": [
      "should download single file",
      "should download batch files",
      "should redict to error page when request ids is null or empty",
      "should redict to error page when no engagement subscribe teq tile"
    ],
    "Children": []
  },
  {
    "$id": "510",
    "FileName": "DateExtensionsFacts.cs",
    "Description": "date extensions facts",
    "WhenList": [],
    "ThenList": [
      "should parse the date and return a short date string",
      "should parse the date in us format and return a short date string",
      "should parse the date and return a short date string with separator",
      "should raise an error if the date format is unknown"
    ],
    "Children": []
  },
  {
    "$id": "511",
    "FileName": "ExcelBuilderFacts.cs",
    "Description": "excel builder facts",
    "WhenList": [],
    "ThenList": [
      "should generate excel with data format",
      "should generate excel with 2 sheets",
      "should generate excel with additional info",
      "should add custom filed values into headers and data"
    ],
    "Children": []
  },
  {
    "$id": "512",
    "FileName": "BaseApiClientFacts.cs",
    "Description": "base api client facts",
    "WhenList": [],
    "ThenList": [
      "should accept 204 without content"
    ],
    "Children": []
  },
  {
    "$id": "513",
    "FileName": "QuestionnaireStatusControllerContractTestFacts.cs",
    "Description": "questionnaire status controller contract test facts",
    "WhenList": [],
    "ThenList": [
      "should get tax year ending",
      "should get questionnaire status summary",
      "should get questionnaire status countries",
      "should get questionnaire status details in 2015 for belgium"
    ],
    "Children": []
  },
  {
    "$id": "514",
    "FileName": "QuestionnaireStatusSendReminderContractTest.cs",
    "Description": "questionnaire status send reminder contract test",
    "WhenList": [],
    "ThenList": [
      "should be able to get related info from tiger"
    ],
    "Children": []
  },
  {
    "$id": "515",
    "FileName": "QuestionnaireStatusControllerFacts.cs",
    "Description": "questionnaire status controller facts",
    "WhenList": [],
    "ThenList": [
      "should get tax year by different month",
      "should get questionnaire status summary by year",
      "should get questionnaire status countries",
      "should get questionnaire status details by year and country",
      "should get questionnaire status details by year country and status",
      "should get questionnaire status details by year country and status due soon",
      "should get questionnaire status details by year country and status past due",
      "should get questionnaire status report details by year country and status",
      "should skip get work record status for report details when status not all or submitted",
      "should send request to get questionnaire status email template"
    ],
    "Children": []
  },
  {
    "$id": "516",
    "FileName": "QuestionnaireStatusSendReminderFacts.cs",
    "Description": "questionnaire status send reminder facts",
    "WhenList": [],
    "ThenList": [
      "should send email with empty cc",
      "should be able to send out reminder",
      "should be able to send out multiple reminders",
      "should not be able to send out reminder with invalidate email",
      "should not be able to send out reminder with invalidate work record ids",
      "should return failed when tiger fails to respond",
      "should return failed when notification service fails to respond",
      "should be able to parse all variables",
      "should be able to preview email",
      "should throw exception when tiger failed to return questionnaire status",
      "should throw exception when current user has no access to resource",
      "should not be able to preview fail when user has no access to tax return tile",
      "should not be able to send reminder when user has no access to tax return tile",
      "should not throw exception when there is one questionnaire has been deleted",
      "should not be able to send reminder to questionnaire which is not not started or in progress"
    ],
    "Children": [
      {
        "$id": "517",
        "FileName": "QuestionnaireStatusSendReminderFacts.cs",
        "Description": "employee basic info",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "518",
    "FileName": "HomeControllerContractTestFacts.cs",
    "Description": "home controller contract test facts",
    "WhenList": [],
    "ThenList": [
      "should get question detail by practice type",
      "set fixture"
    ],
    "Children": [
      {
        "$id": "519",
        "FileName": "HomeControllerContractTestFacts.cs",
        "Description": "fake http context",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      },
      {
        "$id": "520",
        "FileName": "HomeControllerContractTestFacts.cs",
        "Description": "fake http response",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "521",
    "FileName": "CountryControllerFacts.cs",
    "Description": "country controller facts",
    "WhenList": [],
    "ThenList": [
      "should return forbidden when engagement not subscribe tile"
    ],
    "Children": []
  },
  {
    "$id": "522",
    "FileName": "GetAverageRateFact.cs",
    "Description": "get average rate fact",
    "WhenList": [],
    "ThenList": [
      "should get average rate for each questions"
    ],
    "Children": []
  },
  {
    "$id": "523",
    "FileName": "GetCountryAverageRateFact.cs",
    "Description": "get country average rate fact",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "524",
    "FileName": "GetPracticeTypesFact.cs",
    "Description": "get practice types fact",
    "WhenList": [],
    "ThenList": [
      "should get practice types for nancy"
    ],
    "Children": []
  },
  {
    "$id": "525",
    "FileName": "HomeControllerFacts.cs",
    "Description": "home controller facts",
    "WhenList": [],
    "ThenList": [
      "should get question detail by practice type",
      "should not get interval error when get question detail but with nothing from tiger",
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "526",
    "FileName": "EngagementContactFacts.cs",
    "Description": "engagement contact facts",
    "WhenList": [],
    "ThenList": [
      "should get team mail as recipients with single delegated office",
      "should get team mail as recipients with multiple delegated offices",
      "should get team mail as recipients with coordinating office",
      "should get secondary contact as recipients with no team mail",
      "should get engagement admins as recipients with no team mail"
    ],
    "Children": []
  },
  {
    "$id": "527",
    "FileName": "EngagementControllerFacts.cs",
    "Description": "engagement controller facts",
    "WhenList": [],
    "ThenList": [
      "should return all published engagement custom fields",
      "should return forbidden when nancy does not have this engagement association",
      "should return forbidden when nancy not subscribe service initiation tile"
    ],
    "Children": []
  },
  {
    "$id": "528",
    "FileName": "HomeControllerFacts.cs",
    "Description": "home controller facts",
    "WhenList": [],
    "ThenList": [
      "should return service initiation requests and send correct number of requests to load requestor names",
      "should return service initiation requests within 180 days",
      "should create an excel containing all the service requests",
      "should display new assignment detail request according to request id",
      "should display extended assignment detail request according to request id",
      "should display repatriation detail request according to request id",
      "should display localization detail request according to request id",
      "should display separation detail request according to request id",
      "should display consecutive assignment detail request according to request id",
      "should not throw exception when unrequired field is empty",
      "should return 404 when given request is not in db",
      "should return 404 when given form detail is not in db"
    ],
    "Children": []
  },
  {
    "$id": "529",
    "FileName": "NewRequestControllerFacts.cs",
    "Description": "new request controller facts",
    "WhenList": [],
    "ThenList": [
      "assert new assignment parameter detail"
    ],
    "Children": []
  },
  {
    "$id": "530",
    "FileName": "NotificationServiceProviderFacts.cs",
    "Description": "notification service provider facts",
    "WhenList": [],
    "ThenList": [
      "should call notification service"
    ],
    "Children": []
  },
  {
    "$id": "531",
    "FileName": "SendEmailForNewServiceInitiationRequestFacts.cs",
    "Description": "send email for new service initiation request facts",
    "WhenList": [],
    "ThenList": [
      "mock an engagement with delegated offices"
    ],
    "Children": []
  },
  {
    "$id": "532",
    "FileName": "UpdateServiceInitiationSmartTileOverviewFacts.cs",
    "Description": "update service initiation smart tile overview facts",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "533",
    "FileName": "TaxReturnControllerFacts.cs",
    "Description": "tax return controller facts",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "534",
    "FileName": "TaxReturnControllerPacts.cs",
    "Description": "tax return controller pacts",
    "WhenList": [],
    "ThenList": [
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "535",
    "FileName": "TeqSettlementContractTestFacts.cs",
    "Description": "teq settlement contract test facts",
    "WhenList": [],
    "ThenList": [
      "should get payment cycle",
      "mock check user access teq"
    ],
    "Children": []
  },
  {
    "$id": "536",
    "FileName": "TeqSettlementEmailContractTestFacts.cs",
    "Description": "teq settlement email contract test facts",
    "WhenList": [],
    "ThenList": [
      "mock tiger get teq"
    ],
    "Children": []
  },
  {
    "$id": "537",
    "FileName": "TeqEmailControllerFacts.cs",
    "Description": "teq email controller facts",
    "WhenList": [],
    "ThenList": [
      "mock tiger get teq"
    ],
    "Children": [
      {
        "$id": "538",
        "FileName": "TeqEmailControllerFacts.cs",
        "Description": "when send email",
        "WhenList": [],
        "ThenList": [
          "should be able to get email templates"
        ],
        "Children": []
      },
      {
        "$id": "539",
        "FileName": "TeqEmailControllerFacts.cs",
        "Description": "when get email histories",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      },
      {
        "$id": "540",
        "FileName": "TeqEmailControllerFacts.cs",
        "Description": "when batch send emails",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      },
      {
        "$id": "541",
        "FileName": "TeqEmailControllerFacts.cs",
        "Description": "when batch send emails with variables",
        "WhenList": [],
        "ThenList": [],
        "Children": []
      }
    ]
  },
  {
    "$id": "542",
    "FileName": "TeqSettlementControllerFacts.cs",
    "Description": "teq settlement controller facts",
    "WhenList": [],
    "ThenList": [
      "should return error when nancy not subscribed teq settlement",
      "should not send batch update status request for an unauthorized teq",
      "mock forbidden user access for teq",
      "should get payment cycle",
      "set fixture"
    ],
    "Children": []
  },
  {
    "$id": "543",
    "FileName": "TeqSettlementControllerFilterByYearRuleFacts.cs",
    "Description": "teq settlement controller filter by year rule facts",
    "WhenList": [],
    "ThenList": [
      "mock get work record tax equalization from tiger"
    ],
    "Children": []
  },
  {
    "$id": "544",
    "FileName": "TeqSettlementDownloadFacts.cs",
    "Description": "teq settlement download facts",
    "WhenList": [],
    "ThenList": [
      "assert display error message"
    ],
    "Children": []
  }
]